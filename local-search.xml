<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机系统概括</title>
    <link href="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/"/>
    <url>/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h2><p>计算机系统自下而上可大致分为三个部分：（注意：划分于计组的分层不同）<br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-16-43-15.png"></p><h3 id="操作系统的概念、功能"><a href="#操作系统的概念、功能" class="headerlink" title="操作系统的概念、功能"></a>操作系统的概念、功能</h3><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-16-42-18.png"><br><strong>操作系统</strong>（Operating System， OS）是指控制和<strong>管理</strong>整个计算机系统的<strong>硬件和软件</strong>资源，并合理地组织调<br>度计算机的工作和资源的分配；以<strong>提供给用户和其他软件方便的接口和环境</strong>；它是计算机系统中最基本<br>的<strong>系统软件</strong>。<br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-16-48-57.png"></p><ol><li><p>操作系统是系统资源的管理者</p><ul><li>提供的功能<ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul></li><li>目标<ul><li>高效、安全</li></ul></li></ul></li><li><p>操作系统向上层提供方便易用的服务（作为用户与计算机硬件系统之间的接口）</p><ul><li>直接给用户使用的<ul><li>GUI（图形用户界面）</li><li>命令结构（用户可直接使用）<ul><li>联机命令接口（又称交互式命令接口，用户说一句系统跟着做一句）</li><li>脱机命令接口（又称批处理命令接口，用户说一堆系统跟着做一堆）</li></ul></li></ul></li><li>给软件&#x2F;程序员使用的<ul><li>程序接口（由一组“系统调用”（也称“广义指令”）组成，用户通过程序间接使用）</li></ul></li></ul></li></ol><p>注意：命令接口和程序接口统称为“用户接口”</p><ol start="3"><li>操作系统是最接近硬件的一层软件<ul><li>对硬件机器的拓展，没有任何软件支持的计算机成为裸机，通常把覆盖了软件的机器成为扩展机器，又称为虚拟机</li></ul></li></ol><h3 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h3><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-16-57-44.png"></p><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。  </p><ul><li>常考易混概念——并行：指两个或多个事件在同一时刻同时发生。<br>  单核CPU同一时刻只能执行一个程序，各个程序只能并发地执行<br>  多核CPU同一时刻可以同时执行多个程序，多个程序可以并行地执行</li><li>操作系统的并发性指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的。操作系统就是伴随着“多道程序技术”而出现的。因此，操作系统和程序并发是一起诞生的。操作系统的并发性是通过分时得以实现的。</li></ul><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><ul><li>互斥共享方式<br>系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源  </li><li>同时访问方式<br>系统中的某些资源，允许一个时间段内由多个进程“同时”对它们进行访问<br>所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问的（即分时共享）</li></ul><p><strong>并发和共享是操作系统两个最基奎的特征，两者之间互为存在的条件</strong></p><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受到的。</p><ul><li>虚拟技术<ul><li>空分复用技术（如虚拟存储器技术）</li><li>时分复用技术（如虚拟处理器）</li></ul></li></ul><p><strong>没有并发性，就谈不上虚拟性</strong></p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。<br><strong>只有系统拥有并发性，才有可能导致异步性。</strong></p><h2 id="操作系统的发展和分类"><a href="#操作系统的发展和分类" class="headerlink" title="操作系统的发展和分类"></a>操作系统的发展和分类</h2><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-14-33.png"></p><h2 id="操作系统的运行环境"><a href="#操作系统的运行环境" class="headerlink" title="操作系统的运行环境"></a>操作系统的运行环境</h2><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-20-44.png"></p><h3 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h3><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-19-17.png"></p><p><strong>内核态、用户态的切换</strong><br>内核态-&gt;用户态：执行一条特权指令——修改PSW的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权<br>用户态-&gt;内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权</p><p><strong>操作系统的内核</strong><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-25-47.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-25-37.png"></p><p><strong>操作系统的体系结构</strong><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-26-10.png"></p><h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-27-23.png"><br>中断是操作系统内核夺回CPU使用权的唯一途径（通过硬件实现）<br>内核态-&gt;用户态：执行一条特权指令——修改PSW的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权<br>用户态-&gt;内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权<br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-29-20.png"><br>不同的中断信号，需要用不同的中断处理程序来处理。当CPU检测到中断信号后，会根据中断信号的类型去查询“中断向量表”，以此来找到相应的中断处理程序在内存中的存放位置。<br>中断处理程序一定是内核程序，需要运行在“内核态”</p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-17-30-29.png"><br>系统调用 又称 广义指令<br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-27-10.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-27-19.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-27-39.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-27-53.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-34-52.png"></p><p>由用户态进入核心态，不仅状态需要切换，而且所用的堆栈也可能需要由用户堆栈切换为系统堆栈、但这个系统堆栈也是属于该进程的。<br>陷入指令 &#x3D; trap 指令 &#x3D; 访管指令  （不是特权指令）</p><h2 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h2><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-28-49.png"><br><strong>大内核与微内核</strong><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-29-23.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-29-31.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-29-55.png"><br>微内核构架，是指将内核中最基本的功能保留在内核，而将那些不需要在核心态执行的功能移到用户态执行，从而降低内核的设计复杂性。那些移出内核的操作系统代码根据分层的原则被划分成若干服务程序，它们的执行相互独立，交互则都借助于微内核进行通信。<br>微内核结构将操作系统划分为两大部分：微内核和多个服务器。微内核是指精心设计的、能实现操作系统最基本核心功能的小型内核，通常包含： </p><ol><li>与硬件处理紧密相关的部分；</li><li>一些较基本的功能;</li><li>客户和服务器之间的通信。<br>这些部分只是为构建通用操作系统提供一个重要基础,这样就可以确保将内核做得很小。操作系统中的绝大部分功能都放在微内核外的一组服务器（进程）中实现，如用于提供对进程（线程）进行管理的进程（线程）服务器、提供虚拟存储器管理功能的虚拟存储器服务器等，它们都是作为进程来实现的，运行在用户态，客户与服务器之间是借助微内核提供的消息传递机制来实现交互的。<br>单机环境下的客户&#x2F;服务器模式:<br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-23-22-51-18.png"><br>微内核的特点：  </li><li>拓展性和灵活性</li><li>可靠性和安全性</li><li>可移植性</li><li>分布式计算<br><strong>分层结构</strong><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-30-20.png"><br>分层法是将操作系统分为若干层，最底层（层0）为硬件，最高层（层N）为用户接口，每层只能调用紧邻它的低层的功能和服务（单向依赖）。</li></ol><p><strong>模块化</strong><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-30-32.png"><br>在划分模块时，如果将模块划分得太小，虽然能降低模块本身的复杂性，但会使得模块之间的联系过多，造成系统比较混乱；如果模块划分得过大，又会增加模块内部的复杂性，显然应在两者间进行权衡。此外，在划分模块时，要充分考虑模块的独立性问题，因为模块独立性越高， 各模块间的交互就越少，系统的结构也就越清晰。衡量模块的独立性主要有两个标准： </p><ul><li>内聚性，模块内部各部分间联系的紧密程度。内聚性越高，模块独立性越好。 </li><li>耦合度，模块间相互联系和相互影响的程度。耦合度越低，模块独立性越好。</li></ul><p><strong>外核</strong><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-37-42.png"></p><h2 id="操作系统引导"><a href="#操作系统引导" class="headerlink" title="操作系统引导"></a>操作系统引导</h2><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-38-11.png"><br>常见操作系统的引导过程如下： </p><ol><li>激活CPU。激活的CPU读取ROM中的boot程序，将指令寄存器置为BIOS （基本输入&#x2F;输出系统）的第一条指令，即开始执行BIOS的指令。 </li><li>硬件自检。启动BIOS程序后，先进行硬件自检，检查硬件是否出现故障。如有故障，主板会发出不同含义的蜂鸣，启动中止：如无故障，屏幕会显示CPU、内存、硬盘等信息。 </li><li>加载带有操作系统的硬盘。硬件自检后，BIOS开始读取Boot Sequence （通过CMOS里保存的启动顺序，或者通过与用户交互的方式），把控制权交给启动顺序排在第一位的存储设备， 然后CPU将该存储设备引导扇区的内容加载到内存中。 </li><li>加载主引导记录MBRo硬盘以特定的标识符区分引导硬盘和非引导硬盘。如果发现一个存储设备不是可引导盘，就检查下一个存储设备。如无其他启动设备，就会死机。主引导记录MBR的作用是告诉CPU去硬盘的哪个主分区去找操作系统。 </li><li>扫描硬盘分区表，并加载硬盘活动分区。MBR包含硬盘分区表，硬盘分区表以特定的标识符区分活动分区和非活动分区。主引导记录扫描硬盘分区表，进而识别含有操作系统的硬盘分区（活动分区）。找到硬盘活动分区后，开始加载硬盘活动分区，将控制权交给活动分区。 </li><li>加载分区引导记录PBR。读取活动分区的第一个扇区，这个扇区称为分区引导记录（PBR）,其作用是寻找并激活分区根目录下用于引导操作系统的程序（启动管理器）。 </li><li>加载启动管理器。分区引导记录搜索活动分区中的启动管理器，加载启动管理器。 </li><li>加载操作系统</li></ol><ul><li>BIOS:Basic Input Output System 基本输入输出系统</li><li>例子：为一个裸机安装操作系统<ol><li>一般要先进入BIOS系统，选择安装模式</li><li>安装系统的过程，其实是将操作系统相关数据写入硬盘的过程（C盘）</li><li>安装完毕，正常开机启动，操作系统相关数据从硬盘加载到RAM（即一般我们说的“内存条”）中，才能被CPU处理</li></ol></li><li>裸机里有什么？<ul><li>裸机的主板上有ROM、RAM、有空空如也的硬盘</li><li>一台裸机中只有ROM中有数据，包含着BIOS（主板出厂时被写入的）</li></ul></li></ul><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-40-24.png"><br><img src="/2023/05/22/OS-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E6%8B%AC/2023-05-22-19-40-35.png"></p><h2 id="做题总结"><a href="#做题总结" class="headerlink" title="做题总结"></a>做题总结</h2><ol><li>在计算机科学中，<strong>Shell</strong>俗称壳（用来区别于核），是指“为使用者提供操作界面”的软件（command interpreter，<strong>命令解析器</strong>）。它类似于DOS下的COMMAND.COM和后来的<strong>cmd.exe</strong>。它接收用户命令，然后调用相应的应用程序。<ul><li>操作系统与用户通信接口通常不包括（D）A.shell B.命令解释器 C.广义指令 D.缓存管理指令</li><li>命令解释器，命令解析器都属于 命令接口</li><li>命令解释器 就是 cmd.exe</li></ul></li><li>系统调用 又称 广义指令</li><li>系统调用的目的是请求系统服务</li><li>顺序性不属于多道程序设计的基本特征 ，其属于单道程序设计的基本特征</li><li>单处理机系统中处理机与通道可并行</li><li>计算机开机后，操作系统最终被加载到 RAM 里<ul><li>RAM(random-access memory)随机访问存储器 可随机读写，读写速度快，断电后数据消失（内存条）</li><li>ROM(read only memory)只读存储器 数据写入之后不可更改，即使断电数据也不消失 （DVD、VCD）</li><li>EPROM(Electrically Programmable Read-Only-Memory)电可编程序只读存储器 一种特殊的ROM</li></ul></li><li>早期的多道批处理操作系统会将所有的进程的数据全部调入主存，再让多道程序并发执行，即使不支持虚拟存储管理，也能实现“多道程序并发”</li><li>进制多并不意味着CPU利用率高，进程数量越多，进程之间的竞争越激烈，甚至可能因为资源竞争而出现死锁现象</li><li>中断技术使得多道批处理系统的I&#x2F;O设备可与CPU并行工作，当一道程序因I&#x2F;O请求而停止时，CPU便立即转去运行另一道程序</li><li>要注意区分不同语境下“并行”所描述的对象<ul><li>在说明操作系统特点时，我们说，单CPU的操作系统具有并发性而不具有并行性，在这里，“并行”描述的是进程之间的关系，单CPU操作系统无法真正同时运行多个进程，而只能从微观上分时交替地运行多个进程，符合并发却称不上并行</li><li>而这里在说明多任务操作系统的特点时，“并行”指的是多个任务的关系而非多个进程的关系。虽然多进程在单CPU系统无法并行，但是多任务却可以，比如，任务A是执行算术运算，它占用CPU，任务B是执行l0，它不占用CPU，因此这两个任务是可以并行的，此即单CPU多任务操作系统的并行性。</li></ul></li><li>进程调度由调度算法决定CPU使用权，由操作系统实现，不需要（特殊）硬件支持。<ul><li>时钟管理，需要硬件定时器，定期发出时钟脉冲</li><li>地址映射，需要地址变换相关的硬件机构，如页表寄存器、TLB等</li><li>中断系统，需要中断向量地址形成部件，将中断信号映射为中断向量（具体见计组）</li></ul></li><li>中断发生后，进入中断处理的程序属于操作系统程序（内核程序）（具体见计组JMP无条件跳转指令）<ul><li>进入中断处理的程序 与 中断处理程序不同 ，不过中断处理程序也是内核程序</li></ul></li><li>置时钟指令 只能在核心态下运行 因为若能在用户态下运行，那么一个用户进程可在时间片还未到之前把时钟改回去，从而导致时间片永远用不完，进而导致该用户进程一直占用CPU，这显然不合理<ul><li>寄存器清零（通用寄存器清零，一些特殊的寄存器如PSW不允许用户态修改）、读时钟指令、取数指令，均可在汇编语言中涉及，因此都可以运行在用户态</li></ul></li><li>CPU处于核心态时，它可以执行的指令是 除 访管指令 的全部指令</li><li>进程调度程序是内核程序</li><li>中断处理时保存的数据<ul><li>硬件负责<ul><li>程序计数器PC</li><li>程序状态字PSW</li></ul></li><li>操作系统负责<ul><li>其他有必要保存的信息，如某些通用寄存器（不是所有通用寄存器都需要保存，具体需要操作系统判断）</li></ul></li><li>快表tlb和cache不需要 他们里面都是副本</li></ul></li><li>假定指令已装入指令寄存器，则执行时不可能导致CPU从用户态变为内核态（系统态）的是 NOT R0;寄存器RO的内容取非<ul><li>DIV RO, R1 ;（R0）&#x2F;（Rl）—R0 （除数取0，产生内中断）</li><li>INT n ; 产生软中断（内中断，陷入指令）</li><li>MOV RO, addr ;把地址addr处的内存数据放入寄存器R0（可能产生缺页中断）</li></ul></li><li>“DMA传送结束”属于中断（外中断）；“访存时缺页”、“整数除以0”、“存储保护错”属于异常</li><li>时钟中断的主要工作是处理和时间有关的信息及决定是否执行调度程序。和时间有关的所有信息包括：系统时间、进程的时间片、延时、使用CPU的时间、各种定时器。</li><li>通用操作系统 如 安卓 <ul><li>专用操作系统 如 火箭的操作系统</li></ul></li><li>发起系统调用是在用户态 执行系统调用服务程序 是在内核态</li><li>不同的操作系统为应用程序提供了不统一的系统调用接口</li><li>通常可以从四个方面来描述微内核OS：<ol><li>内核足够小</li><li>基于客户&#x2F;服务器模式</li><li>应用“机制与策略分离”原理</li><li>采用面向对象技术</li></ol></li><li>操作系统的引导程序位于磁盘活动分区的引导扇区中。引导程序分为两种：<ul><li>一种是位于ROM中的自举程序（BIOS的组成部分），用于启动具体的设备；</li><li>另一种是位于装有操作系统硬盘的活动分区的引导扇区中的引导程序（称为启动管理器），用于引导操作系统。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文件管理</title>
    <link href="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h3><ul><li>文件的逻辑结构<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-17-36-09.png"><ul><li>无结构文件(流式文件)</li><li>有结构文件(记录式文件)<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-17-36-26.png"><ul><li>顺序文件<ul><li>可变长记录</li><li>定长记录<ul><li>串结构</li><li>顺序结构</li></ul></li></ul></li><li>索引文件</li><li>索引顺序文件</li></ul></li></ul></li></ul><h3 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h3><ul><li>文件的物理结构(文件分配方式)<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-17-42-55.png"><ul><li>连续分配(可顺序访问,也可随机访问,不方便拓展)</li><li>链接分配(只能顺序访问,不可随机访问,方便拓展)<ul><li>隐式链接</li><li>显示链接(FAT)</li></ul></li><li>索引分配(可顺序访问,也可随机访问(没连续结构快),方便拓展)<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-17-44-37.png"><ul><li>链接方案(类似隐式链接)</li><li>多层索引</li><li>混合索引</li></ul></li></ul></li></ul><h3 id="文件的逻辑结构和物理结构"><a href="#文件的逻辑结构和物理结构" class="headerlink" title="文件的逻辑结构和物理结构"></a>文件的逻辑结构和物理结构</h3><p><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-19-24-07.png"></p><ul><li><p>文件的逻辑结构</p><ul><li>无结构文件(流式文件)</li><li>有结构文件(记录式文件)<ul><li>顺序文件<ul><li>可变长记录</li><li>定长记录<ul><li>串结构</li><li>顺序结构</li></ul></li></ul></li><li>索引文件</li><li>索引顺序文件</li></ul></li></ul></li><li><p>文件的物理结构(文件分配方式)</p><ul><li>连续分配(可顺序访问,也可随机访问,不方便拓展)</li><li>链接分配(只能顺序访问,不可随机访问,方便拓展)<ul><li>隐式链接</li><li>显示链接(FAT)</li></ul></li><li>索引分配(可顺序访问,也可随机访问(没连续结构快),方便拓展)<ul><li>链接方案(类似隐式链接)</li><li>多层索引</li><li>混合索引</li></ul></li></ul></li></ul><p>注:索引文件比较有歧义,需结合语境判断  </p><p>“文件的某种逻辑结构支持随机存取&#x2F;随机访问”是指：采用这种逻辑结构的文件，可以根据记录号直接算出该记录对应的逻辑地址（逻辑块号，块内地址） </p><ul><li>注意区分 物理结构的索引表 和 逻辑结构的索引表<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-16-12-25.png"> <ul><li>索引文件的分配表：用户自己建立的，映射：关键字 → 记录存放的逻辑地址</li><li>索引分配的分配表：操作系统建立的，映射：逻辑块号 → 物理块号</li></ul></li></ul><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-17-39-40.png"></p><h2 id="文件存储空间的管理（对空闲磁盘块的管理）"><a href="#文件存储空间的管理（对空闲磁盘块的管理）" class="headerlink" title="文件存储空间的管理（对空闲磁盘块的管理）"></a>文件存储空间的管理（对空闲磁盘块的管理）</h2><p><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-19-27-16.png"></p><h2 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h2><ul><li>向上层提供的几个基本的功能<ul><li>创造文件(create系统调用)</li><li>删除文件(delete系统调用)</li><li>读文件(read系统调用)</li><li>写文件(write系统调用)</li><li>打开文件(open系统调用)</li><li>关闭文件(close系统调用)<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-19-27-54.png"><br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-16-36-58.png"><br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-17-10-07.png"></li></ul></li></ul><h2 id="文件的共享"><a href="#文件的共享" class="headerlink" title="文件的共享"></a>文件的共享</h2><p><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-19-28-27.png"></p><ul><li>基于索引结点的共享方式（硬链接）<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-19-30-32.png"></li><li>基于符号链的共享方式（软链接）<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-19-31-31.png"></li></ul><h2 id="做题总结"><a href="#做题总结" class="headerlink" title="做题总结"></a>做题总结</h2><ul><li><p>UNIX操作系统中，所有设备都被视为特殊的文件，因为UNIX操作系统控制和访问外部设备的方式和访问一个文件的方式都是相同的。</p></li><li><p><code>文件控制块</code>即<code>FCB</code>通常由文件基本信息，存取控制信息和使用信息组成(一个文件目录也被视为一个文件，称目录文件)，一个<code>FCB</code>就是一个<code>文件目录项</code>.</p></li><li><p>将文件描述信息从目录项中分离出来，即应用了<code>索引结点</code>的方法，磁盘的盘块中可以存放更多的目录项，查找文件时可以大大减少其I&#x2F;O信息量</p></li><li><p>加密保护和访问控制两种机制相比</p><ul><li>访问控制机制的灵活性更好</li><li>加密保护机制的安全性更高</li><li>访问控制机制必须由系统实现</li></ul></li><li><p>系统级安全管理包括注册和登录</p></li><li><p>文件的逻辑结构和物理结构</p><ul><li>文件的逻辑结构<ul><li>无结构文件(流式文件)</li><li>有结构文件(记录式文件)<ul><li>顺序文件<ul><li>可变长记录</li><li>定长记录<ul><li>串结构</li><li>顺序结构</li></ul></li></ul></li><li>索引文件</li><li>索引顺序文件</li></ul></li></ul></li><li>文件的物理结构(文件分配方式)<ul><li>连续分配</li><li>链接分配<ul><li>隐式链接</li><li>显示链接(FAT)</li></ul></li><li>索引分配<ul><li>链接方案(类似隐式链接)</li><li>多层索引</li><li>混合索引</li></ul></li></ul></li><li>注:索引文件比较有歧义,需结合语境判断</li><li>注意区分 物理结构的索引表 和 逻辑结构的索引表<br><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-16-12-25.png"></li></ul></li><li><p>直接存取&#x3D;随机存取 (允许用户按任意的次序，直接存取文件中的任意一个记录，或者根据存取命令把读写指针移到文件中的指定记录处读写。)</p><ul><li>链接分配不具有随机存取特性(显式和隐式都不行)</li></ul></li><li><p>记录成组分解技术————不可跨越“块”存储记录 （如盘块长度512B，逻辑记录的固定长度为100B，则每个盘块只能存入5条记录，剩余12B没有用）</p></li><li><p>Read之前必须先Open</p></li></ul><p><img src="/2023/05/21/OS-4-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/2023-05-21-16-36-47.png"></p><ul><li><p>所有的系统调用都会导致CPU从用户态切换到核心态</p></li><li><p>索引结点的数量与文件的个数有关，而与单个文件长度无关</p></li><li><p>提前读、延迟写、为文件分配连续的簇（几个盘块组成）、采用磁盘高速缓存都可以提高文件访问速度。</p></li><li><p>关于目录检索</p><ul><li>散列法具有较快的检索速度 但需要牺牲很多存储空间</li><li>顺序检索法（一般都采用该方法）对树形目录应采用文件的路径名，且从根目录 或 当前目录开始逐渐检索，只要路径名的一个分量名未找到，就应停止查找</li><li>采用顺序检索法查找完成后，可能得到的是文件的物理地址，也可能是索引结点的地址，要看操作系统有没有对FCB进行改进</li></ul></li><li><p>用户优先级是指多个用户同时请求某个文件时，应该满足谁</p></li><li><p>为一个文件的访问，常由用户访问权限和文件属性共同限制</p></li><li><p>防止文件受损常采用备份的方法保护文件</p></li><li><p>存储控制矩阵（Access Control Matrix,有的地方翻译为“访问控制矩阵”）的功能类似于访问控制表（ACL，Access Control List），用于判断用户是否有权对文件进行 读&#x2F;写&#x2F;删除或其他操作</p></li><li><p>设置当前工作目录的主要目的是 加快文件的检索速度   </p></li><li><p>多个进程共享一个文件，各进程的用户打开文件表中关于该文件的表现内容不一定相同，如读写指针、访问权限</p></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>第四章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>查找</title>
    <link href="/2023/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="折半查找（二分）"><a href="#折半查找（二分）" class="headerlink" title="折半查找（二分）"></a>折半查找（二分）</h3><p><img src="/2023/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E6%9F%A5%E6%89%BE/2023-05-23-21-49-16.png"><br>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Binary_Search</span><span class="hljs-params">(SSTable LzElemType key)</span>&#123;<br>    <span class="hljs-type">int</span> low=O,high=L.TableLen-l,mid;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>        mid= (low+high)/<span class="hljs-number">2</span>;          <span class="hljs-comment">//取中间位置</span><br>        <span class="hljs-keyword">if</span>(L.elem［mid］==key)<br>            <span class="hljs-keyword">return</span> mid;             <span class="hljs-comment">//查找成功则返回所在位置</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L.elem［mid］&gt;key)<br>            high=mid-l;             <span class="hljs-comment">//从前半部分继续查找</span><br>        <span class="hljs-keyword">else</span><br>            low-mid+l;              <span class="hljs-comment">//从后半部分继续查找</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;                      <span class="hljs-comment">//查找失败，返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意与另一种<a href="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/#%E4%BA%8C%E5%88%86">二分</a>写法区分，考试以此处为准</p><h4 id="折半查找判定树的构建"><a href="#折半查找判定树的构建" class="headerlink" title="折半查找判定树的构建"></a>折半查找判定树的构建</h4><p><img src="/2023/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E6%9F%A5%E6%89%BE/2023-05-23-21-45-42.png"><br>要学会如何画判定二叉树，如下图 16个元素的有序表 按编号绘制的判定二叉树<br><img src="/2023/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E6%9F%A5%E6%89%BE/2023-05-23-21-47-47.png"><br><img src="/2023/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E6%9F%A5%E6%89%BE/2023-05-23-21-48-34.png"></p><h4 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h4><ul><li>折半查找时间复杂度是O(log<sub>2</sub>n)<br>  顺序查找的时间复杂度是O(n)<br>  但折半查找的速度不一定不顺序查找更快</li><li>mid向上取整时 反过来 l和r之间有偶数个元素，mid分隔后，左半部分比右半部分多一个元素</li></ul><h2 id="做题总结"><a href="#做题总结" class="headerlink" title="做题总结"></a>做题总结</h2><ol><li><p>折半查找和二叉排序树的时间性能有时不相同</p><ul><li>折半查找查找过程构成了二叉排序树，是二叉平衡树 时间复杂度O(log<sub>2</sub>n)</li><li>而二叉排序树在不限平衡的条件下是自由发挥的 最坏情况下 查找长度为O(n)</li></ul></li><li><p>折半查找查找某个不存在的元素，求比较次数至多、至少是多少</p><ul><li>方法一：画出对应二叉排序树（左少右多）</li><li>方法二：我们已知 在二分时 若当前l与r之间有奇数个元素，则mid分隔后，左右两部分元素个数相等，若当前l和r之间有偶数个元素 ，则mid分隔后，左半部分比右半部少一个元素 。对元素为n的顺序数组进行二分对应的二叉排序树是平衡二叉树 <strong>最大高度$h&#x3D;\left \lceil \log_{2}{n+1}  \right \rceil $ 若n为奇数  若查找某个不存在的元素 查找次数至多<code>h</code>,至少要具体看是否能满足满二叉树的要求，若为满二叉树则为<code>h</code>，若不为则为<code>h-1</code>；若n为偶数 若查找某个不存在的元素 至多是 <code>h</code> 至少是 <code>h-1</code>(因为满二叉树结点树n&#x3D;2<sup>h</sup>-1,n一定为奇数) 。</strong></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第七章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法基础-目录</title>
    <link href="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-%E6%80%BB%E7%9B%AE%E5%BD%95/"/>
    <url>/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-%E6%80%BB%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><font size = 20><strong>知识点</strong>  </font></p><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><ul><li><a href="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/#%E6%8E%92%E5%BA%8F">排序</a></li><li><a href="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/#%E4%BA%8C%E5%88%86">二分</a></li><li><a href="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/#%E9%AB%98%E7%B2%BE%E5%BA%A6">高精度</a></li><li><a href="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/#%E5%89%8D%E7%BC%80%E5%92%8C">前缀和</a></li><li><a href="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/#%E5%B7%AE%E5%88%86">差分</a></li><li><a href="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/#%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95">双指针算法</a></li><li><a href="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/#%E4%BD%8D%E8%BF%90%E7%AE%97">位运算</a></li><li><a href="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/#%E7%A6%BB%E6%95%A3%E5%8C%96">离散化</a></li><li><a href="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/#%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6">区间合并</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法基础-1-基础算法（三）</title>
    <link href="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><ol><li>先想朴素(暴力)算法 </li><li>通过i与j的规律 将朴素算法O($n^{2} $) 优化到O(n)</li></ol><h2 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br>常见问题分类：<br>    (<span class="hljs-number">1</span>) 对于一个序列，用两个指针维护一段区间<br>    (<span class="hljs-number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作<br></code></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>(简单)一段话按单词输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">gets</span>(str);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n ;i++)&#123;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(j&lt;n&amp;&amp;str[j]!=<span class="hljs-string">&#x27; &#x27;</span>) j++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;k++)    cout&lt;&lt;str[k];<br>        cout&lt;&lt;endl;<br>        i=j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h3><p><a href="https://www.acwing.com/problem/content/801/">最长连续不重复子序列</a><br><img src="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/2023-05-07-14-42-25.png"></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N =<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,res,a[N],s[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        s[a[i]]++;<br>        <span class="hljs-keyword">while</span>(s[a[i]]&gt;<span class="hljs-number">1</span>)        <span class="hljs-comment">//不用判断i&lt;j,因为在该题中一定成立</span><br>            s[a[j]]--,j++;<br>        res = <span class="hljs-built_in">max</span>(res,i-j+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思想"><a href="#解题思想" class="headerlink" title="解题思想"></a>解题思想</h4><ul><li><p><code>i</code>:枚举  <code>j</code>:往左最远能到什么地方<br><code>j</code>有单调性 随着<code>i</code>向右走 <code>j</code>只会向右走or不走</p></li><li><p>检验子序列是否出现重复数 可用一个数组<code>s</code>,<code>i</code>每次右移 子序列加入一个数<code>a[i]</code> 数组对应数<code>s[a[i]]+1</code> ;<code>j</code>每次右移 子序列失去一个数<code>a[j]</code> 数组对应数<code>s[a[j]]-1</code>  </p><ul><li>若<code>i</code>右移 加入的数<code>a[i]</code>使得子序列出现重复数 重复的数一定是刚加入的数<code>a[i]</code> 此时<code>s[a[i]]&gt;1</code> 所有应该让<code>j</code>右移动 直到<code>s[a[i]]=1</code> 使得子序列无重复数</li></ul></li></ul><h3 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>二进制表示中的第k位数字</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">3</span>;k&gt;=<span class="hljs-number">0</span>;k--)   cout&lt;&lt;(n&gt;&gt;k&amp;<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h2><p>求n的二进制表示中的第k位数字(从低位开始,第一位为0)：n &gt;&gt; k &amp; 1</p><ol><li>先把第k位移到最后一位：n &gt;&gt; k;</li><li>看个位是几: x &amp; 1</li></ol><h1 id="lowbit函数"><a href="#lowbit函数" class="headerlink" title="lowbit函数"></a>lowbit函数</h1><p><code>lowbit(n)</code>函数 返回n在二进制表示下最低位的1以及它后面的0构成的数值</p><h2 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h2><ul><li><code>x&amp;(-x)=x&amp;(~x+1)</code> <ul><li><code>-x</code>是补码 <code>~x</code>是反码</li></ul></li><li>理解:<br>  -已知求补码的的快捷方法:对原码从右往左数,直到遇到第一个数字1,1及1右边的0不变,1左边的数字按位取反  所以<code>x&amp;(-x)</code>只会得到最低位1及右边的0构成的数值,最低位1左边的数&amp;运算后全为0</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>最简单的一个应用————统计二进制中1的个数<br>例题:<br><a href="https://www.acwing.com/problem/content/803/">二进制中1的个数</a><br><img src="/2023/05/07/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/2023-05-07-16-53-01.png"></p><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N =<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(q[i])&#123;<br>            q[i]-=<span class="hljs-built_in">lowbit</span>(q[i]);<br>            j++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,j);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DB基础学习笔记</title>
    <link href="/2023/05/06/DB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/06/DB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>SQL 分类</p><table><thead><tr><th>分类</th><th>全称</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td></tr><tr><td>DML</td><td>Data Manipulation</td></tr><tr><td>DQL</td><td>Data Query Language</td></tr><tr><td>DCL</td><td>Data Control Language</td></tr></tbody></table><h2 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有数据库</span><br><span class="hljs-keyword">show</span> databases;<br><br><span class="hljs-comment">-- 查询当前数据库</span><br><span class="hljs-keyword">select</span> database();<br><br><span class="hljs-comment">-- 创建数据库</span><br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> info ;<br><br><span class="hljs-comment">-- 删除数据库</span><br><span class="hljs-keyword">drop</span> database if <span class="hljs-keyword">exists</span> info;<br><br><span class="hljs-comment">-- 切换数据库</span><br>use info ;<br></code></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询当前数据库所有表</span><br><span class="hljs-keyword">show</span> tables ;<br><br><span class="hljs-comment">-- 查看指定表结构</span><br><span class="hljs-keyword">desc</span> course;<br><br><span class="hljs-comment">-- 查询指定表的建表语句</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course;<br><br><span class="hljs-comment">-- 创建表结构</span><br><span class="hljs-comment">-- CREATE TABLE 表名(</span><br><span class="hljs-comment">-- 字段1 字段1类型 [ COMMENT 字段1注释 ],</span><br><span class="hljs-comment">-- 字段2 字段2类型 [COMMENT 字段2注释 ],</span><br><span class="hljs-comment">-- 字段3 字段3类型 [COMMENT 字段3注释 ],</span><br><span class="hljs-comment">-- ......</span><br><span class="hljs-comment">-- 字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="hljs-comment">-- ) [ COMMENT 表注释 ] ;</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user(<br>                        id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>                        name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>                        age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>                        gender <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>                    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>                    workno <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>                    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>                    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span>,<br>                    age tinyint unsigned comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>                    idcard <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br>                    entrydate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><br><span class="hljs-comment">-- 表操作----&gt;修改</span><br><span class="hljs-comment">-- 1.添加字段</span><br><span class="hljs-comment">-- ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp <span class="hljs-keyword">ADD</span> nickname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>;<br><span class="hljs-comment">-- 2.修改数据类型</span><br><span class="hljs-comment">-- ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br><span class="hljs-comment">-- 3.修改字段名和字段类型</span><br><span class="hljs-comment">-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp CHANGE nickname username <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>;<br><span class="hljs-comment">-- 4.删除字段</span><br><span class="hljs-comment">-- ALTER TABLE 表名 DROP 字段名;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp <span class="hljs-keyword">DROP</span> username;<br><span class="hljs-comment">-- 5.修改表明</span><br><span class="hljs-comment">-- ALTER TABLE 表名 RENAME TO 新表名;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp RENAME <span class="hljs-keyword">TO</span> employee;<br><span class="hljs-comment">-- 表操作----&gt;删除</span><br><span class="hljs-comment">-- 1.删除表</span><br><span class="hljs-comment">-- DROP TABLE [ IF EXISTS ] 表名;</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_user;<br><span class="hljs-comment">-- 2.删除指定表，并重新创建表</span><br><span class="hljs-comment">-- TRUNCATE TABLE 表名;</span><br></code></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-comment">-- 1.给指定字段添加数据</span><br><span class="hljs-comment">-- INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee(id,workno,name,gender,age,idcard,entrydate)<br><span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;Itcast&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;123456789012345678&#x27;</span>,<span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><span class="hljs-comment">-- 2.给全部字段添加数据</span><br><span class="hljs-comment">-- INSERT INTO 表名 VALUES (值1, 值2, ...);</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;张无忌&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;123456789012345670&#x27;</span>,<span class="hljs-string">&#x27;2005-01-01&#x27;</span>);<br><span class="hljs-comment">-- 3.批量添加数据</span><br><span class="hljs-comment">-- INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...) ;</span><br><span class="hljs-comment">-- INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...) ;</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employee <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;韦一笑&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">38</span>,<span class="hljs-string">&#x27;123456789012345670&#x27;</span>,<span class="hljs-string">&#x27;2005-01-01&#x27;</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;赵敏&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;123456789012345670&#x27;</span>,<span class="hljs-string">&#x27;2005-01-01&#x27;</span>);<br><br><span class="hljs-comment">-- 修改数据</span><br><span class="hljs-comment">-- UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ;</span><br><span class="hljs-keyword">update</span> employee <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;itheima&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">update</span> employee <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;小昭&#x27;</span> , gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">update</span> employee <span class="hljs-keyword">set</span> entrydate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2008-01-01&#x27;</span>;<br><br><span class="hljs-comment">-- 删除数据</span><br><span class="hljs-comment">-- DELETE FROM 表名 [ WHERE 条件 ] ;</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> employee;<br></code></pre></td></tr></table></figure><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    字段列表<br><span class="hljs-keyword">FROM</span><br>    表名列表<br><span class="hljs-keyword">WHERE</span><br>    条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    分组字段列表<br><span class="hljs-keyword">HAVING</span><br>    分组后条件列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    排序字段列表<br>LIMIT<br>    分页参数<br></code></pre></td></tr></table></figure><hr><p>准备工作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 准备工作</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> employee;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>                    id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;编号&#x27;</span>,<br>                    workno <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;工号&#x27;</span>,<br>                    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>                    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span>,<br>                    age tinyint unsigned comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>                    idcard <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br>                    workaddress <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) comment <span class="hljs-string">&#x27;工作地址&#x27;</span>,<br>                    entrydate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span><br>)comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;00001&#x27;</span>, <span class="hljs-string">&#x27;柳岩666&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;00002&#x27;</span>, <span class="hljs-string">&#x27;张无忌&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;123456789012345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2005-09-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;00003&#x27;</span>, <span class="hljs-string">&#x27;韦一笑&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;123456789712345670&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2005-08-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;00004&#x27;</span>, <span class="hljs-string">&#x27;赵敏&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;123456757123845670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2009-12-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;00005&#x27;</span>, <span class="hljs-string">&#x27;小昭&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;123456769012345678&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2007-07-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;00006&#x27;</span>, <span class="hljs-string">&#x27;杨逍&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;12345678931234567X&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2006-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;00007&#x27;</span>, <span class="hljs-string">&#x27;范瑶&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;123456789212345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2005-05-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;00008&#x27;</span>, <span class="hljs-string">&#x27;黛绮丝&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;123456157123645670&#x27;</span>, <span class="hljs-string">&#x27;天津&#x27;</span>, <span class="hljs-string">&#x27;2015-05-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;00009&#x27;</span>, <span class="hljs-string">&#x27;范凉凉&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2010-04-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;00010&#x27;</span>, <span class="hljs-string">&#x27;陈友谅&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">53</span>, <span class="hljs-string">&#x27;123456789012345670&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2011-01-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;00011&#x27;</span>, <span class="hljs-string">&#x27;张士诚&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">55</span>, <span class="hljs-string">&#x27;123567897123465670&#x27;</span>, <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-string">&#x27;2015-05-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;00012&#x27;</span>, <span class="hljs-string">&#x27;常遇春&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;123446757152345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2004-02-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">13</span>, <span class="hljs-string">&#x27;00013&#x27;</span>, <span class="hljs-string">&#x27;张三丰&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">88</span>, <span class="hljs-string">&#x27;123656789012345678&#x27;</span>, <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-string">&#x27;2020-11-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;00014&#x27;</span>, <span class="hljs-string">&#x27;灭绝&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">65</span>, <span class="hljs-string">&#x27;123456719012345670&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;2019-05-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;00015&#x27;</span>, <span class="hljs-string">&#x27;胡青牛&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">70</span>, <span class="hljs-string">&#x27;12345674971234567X&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;2018-04-01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;00016&#x27;</span>, <span class="hljs-string">&#x27;周芷若&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2012-06-01&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基础查询</span><br><span class="hljs-comment">-- 1.查询多个字段</span><br><span class="hljs-comment">-- SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class="hljs-comment">-- SELECT * FROM 表名 ;</span><br><span class="hljs-comment">-- 2.字段设置别名</span><br><span class="hljs-comment">-- SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class="hljs-comment">-- SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;</span><br><span class="hljs-comment">-- 3.去除重复记录</span><br><span class="hljs-comment">-- SELECT DISTINCT 字段列表 FROM 表名;</span><br><span class="hljs-keyword">select</span> name,workno,age <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> id ,workno,name,gender,age,idcard,workaddress,entrydate <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> workaddress <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> workaddress <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> workaddress <span class="hljs-string">&#x27;工作地址&#x27;</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 条件查询</span><br><span class="hljs-comment">-- 1.语法</span><br><span class="hljs-comment">-- SELECT 字段列表 FROM 表名 WHERE 条件列表 ;</span><br><span class="hljs-comment">-- 2.条件</span><br><span class="hljs-comment">-- BETWEEN ... AND ...  在某个范围之内(含最小、最大值)</span><br><span class="hljs-comment">-- IN(...)              在in之后的列表中的值，多选一</span><br><span class="hljs-comment">-- LIKE 占位符           模糊匹配(_匹配单个字符, %匹配任意个字符)</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> idcard <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> idcard <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">!=</span> <span class="hljs-number">88</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">88</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">15</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;=</span> <span class="hljs-number">15</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">15</span> <span class="hljs-keyword">and</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">25</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">or</span> age <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">or</span> age <span class="hljs-operator">=</span><span class="hljs-number">40</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-keyword">in</span>(<span class="hljs-number">18</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__&#x27;</span>; <span class="hljs-comment">-- 查询姓名为两个字的员工信息 _ %</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> idcard <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%X&#x27;</span>;   <span class="hljs-comment">-- 查询身份证号最后一位是X的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> idcard <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_________________X&#x27;</span>; <span class="hljs-comment">-- 查询身份证号最后一位是X的员工信息</span><br></code></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分组查询</span><br><span class="hljs-comment">-- 语法</span><br><span class="hljs-comment">-- SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后过滤条件 ];</span><br><span class="hljs-comment">-- where与having区别</span><br><span class="hljs-comment">-- 1.执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</span><br><span class="hljs-comment">-- 2.判断条件不同：where不能对聚合函数进行判断，而having可以。</span><br><span class="hljs-comment">-- 注意事项</span><br><span class="hljs-comment">-- 1.分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</span><br><span class="hljs-comment">-- 2.执行顺序: where &gt; 聚合函数 &gt; having 。</span><br><span class="hljs-comment">-- 3.支持多字段分组, 具体语法为 : group by columnA,columnB</span><br><span class="hljs-comment">-- 4.一般查询的字段是分组之后的字段和聚合函数字段</span><br><span class="hljs-keyword">select</span> gender, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender ; <span class="hljs-comment">-- 根据性别分组 , 统计男性员工 和 女性员工的数量</span><br><span class="hljs-keyword">select</span> gender, <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender ; <span class="hljs-comment">-- 根据性别分组 , 统计男性员工 和 女性员工的平均年龄</span><br><span class="hljs-keyword">select</span> workaddress, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) address_count <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>    workaddress <span class="hljs-keyword">having</span> address_count <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>; <span class="hljs-comment">-- 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</span><br><span class="hljs-keyword">select</span> workaddress, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) 员工数 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">45</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>    workaddress <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">select</span> workaddress, gender, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-string">&#x27;数量&#x27;</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender , workaddress; <span class="hljs-comment">-- 统计各个工作地址上班的男性及女性员工的数量</span><br></code></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 排序查询</span><br><span class="hljs-comment">-- 语法</span><br><span class="hljs-comment">-- SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ;</span><br><span class="hljs-comment">-- 排序方式 ASC : 升序(默认值)  DESC: 降序</span><br><span class="hljs-comment">-- 如果是升序, 可以不指定排序方式ASC ;</span><br><span class="hljs-comment">-- 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span>; <span class="hljs-comment">--  根据年龄对公司的员工进行升序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age;     <span class="hljs-comment">--  根据年龄对公司的员工进行升序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> entrydate <span class="hljs-keyword">desc</span>; <span class="hljs-comment">-- 根据入职时间, 对员工进行降序排序</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span> , entrydate <span class="hljs-keyword">desc</span>;    <span class="hljs-comment">-- 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</span><br></code></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分页查询</span><br><span class="hljs-comment">-- 语法</span><br><span class="hljs-comment">-- SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ;</span><br><span class="hljs-comment">-- 注意事项</span><br><span class="hljs-comment">-- 起始索引从0开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</span><br><span class="hljs-comment">-- 分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</span><br><span class="hljs-comment">-- 如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">0</span>,<span class="hljs-number">10</span>; <span class="hljs-comment">-- 查询第1页员工数据, 每页展示10条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">10</span>;   <span class="hljs-comment">-- 查询第1页员工数据, 每页展示10条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">10</span>,<span class="hljs-number">10</span>; <span class="hljs-comment">--  查询第2页员工数据, 每页展示10条记录 --------&gt; (页码-1)*页展示记录数</span><br><br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-keyword">in</span>(<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>);  <span class="hljs-comment">-- 查询年龄为20,21,22,23岁的女员工信息。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">and</span> ( age <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">40</span> ) <span class="hljs-keyword">and</span> name <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;___&#x27;</span>;  <span class="hljs-comment">-- 查询性别为 男 ，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</span><br><span class="hljs-keyword">select</span> gender, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;  <span class="hljs-comment">-- 统计员工表中, 年龄小于60岁的 , 男性员工和女性员工的人数。</span><br><span class="hljs-keyword">select</span> name , age <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">35</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span> , entrydate <span class="hljs-keyword">desc</span>; <span class="hljs-comment">-- 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">40</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">asc</span> ,entrydate <span class="hljs-keyword">asc</span> limit <span class="hljs-number">5</span> ; <span class="hljs-comment">-- 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序。</span><br></code></pre></td></tr></table></figure><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>DQL语句的执行顺序为：<br><code>from</code> … <code>where</code> … <code>group by</code> … <code>having</code> … <code>select</code> … <code>order by</code> … <code>limit</code> …</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询用户</span><br><span class="hljs-comment">-- select * from mysql.user;</span><br><span class="hljs-comment">-- 创建用户</span><br><span class="hljs-comment">-- CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="hljs-comment">-- 修改用户密码</span><br><span class="hljs-comment">-- ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br><span class="hljs-comment">-- 删除用户</span><br><span class="hljs-comment">-- DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;itcast&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>; <span class="hljs-comment">-- 创建用户itcast, 只能够在当前主机localhost访问, 密码123456;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;heima&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>; <span class="hljs-comment">--  创建用户heima, 可以在任意主机访问该数据库, 密码123456;</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;heima&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;1234&#x27;</span>;<span class="hljs-comment">-- 修改用户heima的访问密码为1234;</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;itcast&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>; <span class="hljs-comment">-- 删除 itcast@localhost 用户</span><br></code></pre></td></tr></table></figure><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL, ALL PRIVILEGES</td><td align="center">所有权限</td></tr><tr><td align="center">SELECT</td><td align="center">查询数据</td></tr><tr><td align="center">INSERT</td><td align="center">插入数据</td></tr><tr><td align="center">UPDATE</td><td align="center">修改数据</td></tr><tr><td align="center">DELETE</td><td align="center">删除数据</td></tr><tr><td align="center">ALTER</td><td align="center">修改表</td></tr><tr><td align="center">DROP</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">CREATE</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment">-- 查询权限</span><br><span class="hljs-comment">-- SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br><span class="hljs-comment">-- 授予权限</span><br><span class="hljs-comment">-- GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="hljs-comment">-- 撤销权限</span><br><span class="hljs-comment">-- REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;heima&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; <span class="hljs-comment">-- 查询 &#x27;heima&#x27;@&#x27;%&#x27; 用户的权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> itcast.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;heima&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; <span class="hljs-comment">-- 授予 &#x27;heima&#x27;@&#x27;%&#x27; 用户itcast数据库所有表的所有操作权限</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> itcast.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;heima&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; <span class="hljs-comment">-- 撤销 &#x27;heima&#x27;@&#x27;%&#x27; 用户的itcast数据库的所有权限</span><br><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p>常用如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接，将S1，S2，… Sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;Hello&#x27;</span> , <span class="hljs-string">&#x27; MySQL&#x27;</span>); <span class="hljs-comment">-- concat : 字符串拼接</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">lower</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">-- lower : 全部转小写</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">upper</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">-- upper : 全部转大写</span><br><span class="hljs-keyword">select</span> lpad(<span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">-- lpad : 左填充</span><br><span class="hljs-keyword">select</span> rpad(<span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;-&#x27;</span>); <span class="hljs-comment">-- rpad : 右填充</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(<span class="hljs-string">&#x27; Hello MySQL &#x27;</span>); <span class="hljs-comment">-- trim : 去除空格</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(<span class="hljs-string">&#x27;Hello MySQL&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>); <span class="hljs-comment">-- substring : 截取子字符串</span><br><span class="hljs-comment">-- 案例</span><br><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> workno <span class="hljs-operator">=</span> lpad(workno, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">-- 由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如： 1号员工的工号应该为00001。</span><br></code></pre></td></tr></table></figure><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><p>常用如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.1</span>); <span class="hljs-comment">-- ceil：向上取整</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">1.9</span>); <span class="hljs-comment">-- floor：向下取整</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">mod</span>(<span class="hljs-number">7</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">--  mod：取模</span><br><span class="hljs-keyword">select</span> rand(); <span class="hljs-comment">-- rand：获取随机数</span><br><span class="hljs-keyword">select</span> round(<span class="hljs-number">2.344</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">-- round：四舍五入</span><br><span class="hljs-comment">--案例</span><br><span class="hljs-keyword">select</span> lpad(round(rand()<span class="hljs-operator">*</span><span class="hljs-number">1000000</span> , <span class="hljs-number">0</span>), <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">-- 通过数据库的函数，生成一个六位数的随机验证码。</span><br></code></pre></td></tr></table></figure><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><p>常用如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL exprtype)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回起始时间date1 和 结束时间date2之间的天数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> curdate(); <span class="hljs-comment">-- curdate：当前日期</span><br><span class="hljs-keyword">select</span> curtime(); <span class="hljs-comment">-- curtime：当前时间</span><br><span class="hljs-keyword">select</span> now(); <span class="hljs-comment">-- now：当前日期和时间</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">YEAR</span>(now()); <span class="hljs-comment">-- 当前年</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">MONTH</span>(now()); <span class="hljs-comment">-- 当前月</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">DAY</span>(now()); <span class="hljs-comment">-- 当前日</span><br><span class="hljs-keyword">select</span> date_add(now(), <span class="hljs-type">INTERVAL</span> <span class="hljs-number">70</span> <span class="hljs-keyword">YEAR</span> ); <span class="hljs-comment">-- date_add：增加指定的时间间隔</span><br><span class="hljs-keyword">select</span> datediff(<span class="hljs-string">&#x27;2021-10-01&#x27;</span>, <span class="hljs-string">&#x27;2021-12-01&#x27;</span>); <span class="hljs-comment">-- datediff：获取两个日期相差的天数</span><br><span class="hljs-comment">-- 案例</span><br><span class="hljs-comment">-- 查询所有员工的入职天数，并根据入职天数倒序排序。</span><br><span class="hljs-keyword">select</span> name,datediff(curdate(),entrydate) <span class="hljs-keyword">as</span> 入职天数 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 入职天数 <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value , t , f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1 , value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [res1] …ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [res1] … ELSE [ default ]</td><td>END如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- if</span><br><span class="hljs-keyword">select</span> if(<span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;Ok&#x27;</span>, <span class="hljs-string">&#x27;Error&#x27;</span>);<br><span class="hljs-comment">-- ifnull</span><br><span class="hljs-keyword">select</span> ifnull(<span class="hljs-string">&#x27;Ok&#x27;</span>,<span class="hljs-string">&#x27;Default&#x27;</span>);<br><span class="hljs-keyword">select</span> ifnull(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;Default&#x27;</span>);<br><span class="hljs-keyword">select</span> ifnull(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;Default&#x27;</span>);<br><span class="hljs-comment">-- case when then else end</span><br><span class="hljs-comment">-- 需求: 查询emp表的员工姓名和工作地址 (北京/上海 ----&gt; 一线城市 , 其他 ----&gt; 二线城市)</span><br><span class="hljs-keyword">select</span><br>    name,<br>    ( <span class="hljs-keyword">case</span> workaddress <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;北京&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;一线城市&#x27;</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;上海&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;一线城市&#x27;</span> <span class="hljs-keyword">else</span><br>        <span class="hljs-string">&#x27;二线城市&#x27;</span> <span class="hljs-keyword">end</span> ) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;工作地址&#x27;</span><br><span class="hljs-keyword">from</span> emp;<br><br></code></pre></td></tr></table></figure><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>作用于表中字段上的规则，用于限制存储在表中的数据，保证数据库中数据的正确、有效性和完整性<br>分类：</p><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为null</td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束(8.0.16版本之后)</td><td align="center">保证字段值满足某一个条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_user(<br>                        id <span class="hljs-type">int</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY COMMENT <span class="hljs-string">&#x27;ID唯一标识&#x27;</span>,<br>                        name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span> ,<br>                        age <span class="hljs-type">int</span> <span class="hljs-keyword">check</span> (age <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">120</span>) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> ,<br>                        status <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;状态&#x27;</span>,<br>                        gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) COMMENT <span class="hljs-string">&#x27;性别&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性<br>表(子表)的外键是关联另一张表(父表)的主键</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>添加外键<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>    字段名 数据类型,<br>    ...<br>    [<span class="hljs-keyword">CONSTRAINT</span>] [外键名称] <span class="hljs-keyword">FOREIGN</span> KEY (外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表 (主表列名)<br>);<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表 (主表列名) ;<br>```  <br><br>案例:<br>```<span class="hljs-keyword">sql</span><br><span class="hljs-comment">-- 案例：为emp表的dept_id字段添加外键约束,关联dept表的主键id。</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dept_id <span class="hljs-keyword">foreign</span> key (dept_id) <span class="hljs-keyword">references</span> dept(id);<br></code></pre></td></tr></table></figure><ol start="2"><li>删除外键<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY 外键名称;<br></code></pre></td></tr></table></figure></li></ol><p>案例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例：删除emp表的外键fk_emp_dept_id</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key fk_emp_dept_id;<br></code></pre></td></tr></table></figure><h3 id="删除更新行为"><a href="#删除更新行为" class="headerlink" title="删除更新行为"></a>删除更新行为</h3><p>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除&#x2F;更新行为。具体的删除&#x2F;更新行为有以下几种:</p><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。 (与 RESTRICT 一致) 默认行为</td></tr><tr><td align="center">RESTRICT</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。 (与 NO ACTION 一致) 默认行为</td></tr><tr><td align="center">CASCADE</td><td align="center">当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录。</td></tr><tr><td align="center">SET NULL</td><td align="center">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td></tr></tbody></table><p>具体语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段) <span class="hljs-keyword">REFERENCES</span> 主表名 (主表字段名) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE;<br></code></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>准备工作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> emp;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> dept;<br><span class="hljs-comment">-- 创建dept表，并插入数据</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>                     id <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>                     name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;部门名称&#x27;</span><br>)comment <span class="hljs-string">&#x27;部门表&#x27;</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept (id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;研发部&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;市场部&#x27;</span>),(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;财务部&#x27;</span>), (<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;销售部&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;总经办&#x27;</span>), (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;人事部&#x27;</span>);<br><span class="hljs-comment">-- 创建emp表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(<br>                    id <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>                    name <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>                    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>                    job <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) comment <span class="hljs-string">&#x27;职位&#x27;</span>,<br>                    salary <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;薪资&#x27;</span>,<br>                    entrydate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>                    managerid <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;直属领导ID&#x27;</span>,<br>                    dept_id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;部门ID&#x27;</span><br>)comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br><span class="hljs-comment">-- 添加外键</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dept_id <span class="hljs-keyword">foreign</span> key (dept_id) <span class="hljs-keyword">references</span> dept(id);<br><span class="hljs-comment">-- 插入数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (id, name, age, job,salary, entrydate, managerid, dept_id)<br><span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;金庸&#x27;</span>, <span class="hljs-number">66</span>, <span class="hljs-string">&#x27;总裁&#x27;</span>,<span class="hljs-number">20000</span>, <span class="hljs-string">&#x27;2000-01-01&#x27;</span>, <span class="hljs-keyword">null</span>,<span class="hljs-number">5</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;张无忌&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;项目经理&#x27;</span>,<span class="hljs-number">12500</span>, <span class="hljs-string">&#x27;2005-12-05&#x27;</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;杨逍&#x27;</span>, <span class="hljs-number">33</span>, <span class="hljs-string">&#x27;开发&#x27;</span>, <span class="hljs-number">8400</span>,<span class="hljs-string">&#x27;2000-11-03&#x27;</span>, <span class="hljs-number">2</span>,<span class="hljs-number">1</span>),<br>    (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;韦一笑&#x27;</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;开发&#x27;</span>,<span class="hljs-number">11000</span>, <span class="hljs-string">&#x27;2002-02-05&#x27;</span>, <span class="hljs-number">2</span>,<span class="hljs-number">1</span>),<br>    (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;常遇春&#x27;</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;开发&#x27;</span>,<span class="hljs-number">10500</span>, <span class="hljs-string">&#x27;2004-09-07&#x27;</span>, <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<br>    (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;小昭&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;程序员鼓励师&#x27;</span>,<span class="hljs-number">6600</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">2</span>,<span class="hljs-number">1</span>),<br>    (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;灭绝&#x27;</span>, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;财务总监&#x27;</span>,<span class="hljs-number">8500</span>, <span class="hljs-string">&#x27;2002-09-12&#x27;</span>, <span class="hljs-number">1</span>,<span class="hljs-number">3</span>),<br>    (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;周芷若&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;会计&#x27;</span>,<span class="hljs-number">48000</span>, <span class="hljs-string">&#x27;2006-06-02&#x27;</span>, <span class="hljs-number">7</span>,<span class="hljs-number">3</span>),<br>    (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;丁敏君&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;出纳&#x27;</span>,<span class="hljs-number">5250</span>, <span class="hljs-string">&#x27;2009-05-13&#x27;</span>, <span class="hljs-number">7</span>,<span class="hljs-number">3</span>),<br>    (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;赵敏&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;市场部总监&#x27;</span>,<span class="hljs-number">12500</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<br>    (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;鹿杖客&#x27;</span>, <span class="hljs-number">56</span>, <span class="hljs-string">&#x27;职员&#x27;</span>,<span class="hljs-number">3750</span>, <span class="hljs-string">&#x27;2006-10-03&#x27;</span>, <span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;鹤笔翁&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;职员&#x27;</span>,<span class="hljs-number">3750</span>, <span class="hljs-string">&#x27;2007-05-09&#x27;</span>, <span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    (<span class="hljs-number">13</span>, <span class="hljs-string">&#x27;方东白&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;职员&#x27;</span>,<span class="hljs-number">5500</span>, <span class="hljs-string">&#x27;2009-02-12&#x27;</span>, <span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    (<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;张三丰&#x27;</span>, <span class="hljs-number">88</span>, <span class="hljs-string">&#x27;销售总监&#x27;</span>,<span class="hljs-number">14000</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">1</span>,<span class="hljs-number">4</span>),<br>    (<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;俞莲舟&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;销售&#x27;</span>,<span class="hljs-number">4600</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">14</span>,<span class="hljs-number">4</span>),<br>    (<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;宋远桥&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;销售&#x27;</span>,<span class="hljs-number">4600</span>, <span class="hljs-string">&#x27;2004-10-12&#x27;</span>, <span class="hljs-number">14</span>,<span class="hljs-number">4</span>),<br>    (<span class="hljs-number">17</span>, <span class="hljs-string">&#x27;陈友谅&#x27;</span>, <span class="hljs-number">42</span>, <span class="hljs-keyword">null</span>,<span class="hljs-number">2000</span>, <span class="hljs-string">&#x27;2011-10-12&#x27;</span>, <span class="hljs-number">1</span>,<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><h2 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h2><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接查询的是两张表交集部分的数据。<br>内连接：相当于左连接与右连接的合并，去掉所有含NULL的数据行，剩下的就是查询出来的数据了。其实就是两边的表都必须满足条件。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>内连接的语法分为两种: 隐式内连接、显式内连接。</p><ol><li>隐式内连接<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> , 表<span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> 条件 ... ;<br></code></pre></td></tr></table></figure></li><li>显示外连接<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> [ <span class="hljs-keyword">INNER</span> ] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 连接条件 ... ;<br></code></pre></td></tr></table></figure>相对而言，隐式连接好理解好书写，语法简单，担心的点较少。但是显式连接可以减少字段的扫描，有更快的执行速度。</li></ol><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ol><li>查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)<br> 表结构: emp , dept<br> 连接条件: emp.dept_id &#x3D; dept.id<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> emp.name , dept.name <span class="hljs-keyword">from</span> emp , dept <span class="hljs-keyword">where</span> emp.dept_id <span class="hljs-operator">=</span> dept.id ;<br><span class="hljs-comment">-- 为每一张表起别名,简化SQL编写</span><br><span class="hljs-keyword">select</span> e.name,d.name <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">as</span> e , dept <span class="hljs-keyword">as</span> d <span class="hljs-keyword">where</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></figure></li><li>查询每一个员工的姓名 , 及关联的部门的名称 (显式内连接实现) — INNER JOIN … ON …<br> 表结构: emp , dept<br> 连接条件: emp.dept_id &#x3D; dept.id</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br><span class="hljs-comment">-- 为每一张表起别名,简化SQL编写</span><br><span class="hljs-keyword">select</span> e.name, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></figure><p><strong>表的别名</strong></p><ol><li><code>tablea as 别名1 , tableb as 别名2 ;</code></li><li><code>tablea 别名1 , tableb 别名2 ;</code></li></ol><ul><li>注意: 一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</li></ul><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>外连接分为两种，分别是：左外连接 和 右外连接。<br>左连接：在 LEFT JOIN 左边的表里面数据全被全部查出来，右边的数据只会查出符合ON后面的符合条件的数据，不符合的会用NULL代替。<br>右连接：与 LEFT JOIN 正好相反，右边的数据会会全部查出来，左边只会查出ON后面符合条件的数据，不符合的会用NULL代替。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><ol><li>左外连接——相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">LEFT</span> [ <span class="hljs-keyword">OUTER</span> ] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ... ;<br></code></pre></td></tr></table></figure></li><li>右外连接——右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">RIGHT</span> [ <span class="hljs-keyword">OUTER</span> ] <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">ON</span> 条件 ... ;<br></code></pre></td></tr></table></figure></li></ol><ul><li>注意:左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</li></ul><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><ol><li>查询emp表的所有数据, 和对应的部门信息<br> 由于需求中提到，要查询emp的所有数据，所以是不能内连接查询的，需要考虑使用外连接查询。<br> 表结构: emp, dept<br> 连接条件: emp.dept_id &#x3D; dept.id</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></figure><ol start="2"><li>查询dept表的所有数据, 和对应的员工信息(右外连接)<br> 由于需求中提到，要查询dept表的所有数据，所以是不能内连接查询的，需要考虑使用外连接查询。<br> 表结构: emp, dept<br> 连接条件: emp.dept_id &#x3D; dept.id</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> d.<span class="hljs-operator">*</span>, e.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br><span class="hljs-keyword">select</span> d.<span class="hljs-operator">*</span>, e.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept d <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> emp e <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br></code></pre></td></tr></table></figure><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><p>自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表A 别名A <span class="hljs-keyword">JOIN</span> 表A 别名B <span class="hljs-keyword">ON</span> 条件 ... ;<br></code></pre></td></tr></table></figure><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><ol><li>查询员工 及其 所属领导的名字<br> 表结构: emp</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name , b.name <span class="hljs-keyword">from</span> emp a , emp b <span class="hljs-keyword">where</span> a.managerid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><ol start="2"><li>查询所有员工 emp 及其领导的名字 emp , 如果员工没有领导, 也需要查询出来<br> 表结构: emp a , emp b</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name <span class="hljs-string">&#x27;员工&#x27;</span>, b.name <span class="hljs-string">&#x27;领导&#x27;</span> <span class="hljs-keyword">from</span> emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp b <span class="hljs-keyword">on</span> a.managerid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表A ...<br><span class="hljs-keyword">UNION</span> [ <span class="hljs-keyword">ALL</span> ]<br><span class="hljs-keyword">SELECT</span> 字段列表 <span class="hljs-keyword">FROM</span> 表B ....;<br></code></pre></td></tr></table></figure><ul><li><strong>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</strong></li><li><code>union all</code> 会将全部的数据直接<strong>合并在一起</strong>，<code>union</code> 会对合并之后的<strong>数据去重</strong>。</li></ul><h4 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h4><ol><li>将薪资低于 5000 的员工 , 和 年龄大于 50 岁的员工全部查询出来.<br>当前对于这个需求，我们可以直接使用多条件查询，使用逻辑运算符 or 连接即可。 那这里呢，我们也可以通过union&#x2F;union all来联合查询.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&lt;</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">50</span>;<br><span class="hljs-comment">-- union all查询出来的结果，仅仅进行简单的合并，并未去重。</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&lt;</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">50</span>;<br><span class="hljs-comment">-- union 联合查询，会对查询出来的结果进行去重处理。</span><br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> column1 <span class="hljs-operator">=</span> ( <span class="hljs-keyword">SELECT</span> column1 <span class="hljs-keyword">FROM</span> t2 );<br></code></pre></td></tr></table></figure><p>子查询外部的语句可以是<code>INSERT</code>  <code>UPDATE</code>  <code>DELETE</code>  <code>SELECT</code> 的任何一个。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询(子查询结果为一列)</li><li>行子查询(子查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul><p>根据子查询位置，分为：</p><ul><li>WHERE之后</li><li>FROM之后</li><li>SELECT之后</li></ul><h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。<br>常用的操作符：<code>=</code> <code>&lt;&gt;</code> <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></p><h4 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h4><ul><li>查询 “销售部” 的所有员工信息</li></ul><p>完成这个需求时，我们可以将需求分解为两步：</p><ol><li>查询 “销售部” 部门ID</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;销售部&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>根据 “销售部” 部门ID, 查询员工信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;销售部&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>查询在 “方东白” 入职之后的员工信息</li></ul><p>完成这个需求时，我们可以将需求分解为两步：</p><ol><li>查询 方东白 的入职日期</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> entrydate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;方东白&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>查询指定入职日期之后入职的员工信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entrydate <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">select</span> entrydate <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;方东白&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。<br>常用的操作符：<code>IN</code> 、<code>NOT IN</code> 、 <code>ANY</code> 、<code>SOME</code> 、 <code>ALL</code>  </p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围之内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围之内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表中，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table><h4 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h4><ul><li>查询 “销售部” 和 “市场部” 的所有员工信息<br>分解为以下两步:</li></ul><ol><li>查询 “销售部” 和 “市场部” 的部门ID<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;销售部&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;市场部&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>根据部门ID, 查询员工信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;销售部&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;市场部&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><ul><li>查询比 财务部 所有人工资都高的员工信息<br>分解为以下两步:</li></ul><ol><li>查询所有 财务部 人员工资<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span>;<br><span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li>比 财务部 所有人工资都高的员工信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">all</span> ( <span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span>) );<br></code></pre></td></tr></table></figure></li></ol><ul><li>查询比研发部其中任意一人工资高的员工信息<br>分解为以下两步:</li></ul><ol><li>查询研发部所有人工资<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;研发部&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li>比研发部其中任意一人工资高的员工信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span> ( <span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;研发部&#x27;</span>) );<br></code></pre></td></tr></table></figure></li></ol><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。<br>常用的操作符：<code>=</code>、<code>&lt;&gt;</code> 、<code>IN</code> 、<code>NOT IN</code></p><h4 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h4><ul><li>查询与 “张无忌” 的薪资及直属领导相同的员工信息 ;<br>这个需求同样可以拆解为两步进行:</li></ul><ol><li><p>查询 “张无忌” 的薪资及直属领导</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> salary, managerid <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张无忌&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询与 “张无忌” 的薪资及直属领导相同的员工信息 ;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (salary,managerid) <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> salary, managerid <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张无忌&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p>子查询返回的结果是多行多列，这种子查询称为表子查询。<br>常用的操作符：<code>IN</code></p><h4 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h4><ul><li>查询与 “鹿杖客” , “宋远桥” 的职位和薪资相同的员工信息<br>分解为两步执行:</li></ul><ol><li><p>查询 “鹿杖客” , “宋远桥” 的职位和薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> job, salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;鹿杖客&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;宋远桥&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询与 “鹿杖客” , “宋远桥” 的职位和薪资相同的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> (job,salary) <span class="hljs-keyword">in</span> ( <span class="hljs-keyword">select</span> job, salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;鹿杖客&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;宋远桥&#x27;</span> );<br></code></pre></td></tr></table></figure></li></ol><ul><li>查询入职日期是 “2006-01-01” 之后的员工信息 , 及其部门信息<br>分解为两步执行:</li></ul><ol><li><p>入职日期是 “2006-01-01” 之后的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entrydate <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2006-01-01&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>查询这部分员工, 对应的部门信息;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>, d.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entrydate <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2006-01-01&#x27;</span>) e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id ;<br></code></pre></td></tr></table></figure></li></ol><h2 id="多表查询案例"><a href="#多表查询案例" class="headerlink" title="多表查询案例"></a>多表查询案例</h2><p>数据环境准备:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> salgrade(<br>    grade <span class="hljs-type">int</span>,<br>    losal <span class="hljs-type">int</span>,<br>    hisal <span class="hljs-type">int</span><br>) comment <span class="hljs-string">&#x27;薪资等级表&#x27;</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-number">3001</span>,<span class="hljs-number">5000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>,<span class="hljs-number">5001</span>,<span class="hljs-number">8000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>,<span class="hljs-number">8001</span>,<span class="hljs-number">10000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">5</span>,<span class="hljs-number">10001</span>,<span class="hljs-number">15000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>,<span class="hljs-number">15001</span>,<span class="hljs-number">20000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">7</span>,<span class="hljs-number">20001</span>,<span class="hljs-number">25000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salgrade <span class="hljs-keyword">values</span> (<span class="hljs-number">8</span>,<span class="hljs-number">25001</span>,<span class="hljs-number">30000</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>). 查询员工的姓名、年龄、职位、部门信息 （隐式内连接）<br>表: emp , dept<br>连接条件: emp.dept_id <span class="hljs-operator">=</span> dept.id<br><span class="hljs-keyword">select</span> e.name , e.age , e.job , d.name <span class="hljs-keyword">from</span> emp e , dept d <span class="hljs-keyword">where</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br><br><br><span class="hljs-number">2</span>). 查询年龄小于<span class="hljs-number">30</span>岁的员工的姓名、年龄、职位、部门信息（显式内连接）<br>表: emp , dept<br>连接条件: emp.dept_id <span class="hljs-operator">=</span> dept.id<br><span class="hljs-keyword">select</span> e.name , e.age , e.job , d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id <span class="hljs-keyword">where</span> e.age <span class="hljs-operator">&lt;</span> <span class="hljs-number">30</span>;<br><br><br><span class="hljs-number">3</span>). 查询拥有员工的部门ID、部门名称<br>表: emp , dept<br>连接条件: emp.dept_id <span class="hljs-operator">=</span> dept.id<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> d.id , d.name <span class="hljs-keyword">from</span> emp e , dept d <span class="hljs-keyword">where</span> e.dept_id <span class="hljs-operator">=</span> d.id;<br><br><br><span class="hljs-number">4</span>). 查询所有年龄大于<span class="hljs-number">40</span>岁的员工, 及其归属的部门名称; 如果员工没有分配部门, 也需要展示出来(外连接)<br>表: emp , dept<br>连接条件: emp.dept_id <span class="hljs-operator">=</span> dept.id<br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>, d.name <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id <span class="hljs-keyword">where</span> e.age <span class="hljs-operator">&gt;</span> <span class="hljs-number">40</span> ;<br><br><br><span class="hljs-number">5</span>). 查询所有员工的工资等级<br>表: emp , salgrade<br>连接条件 : emp.salary <span class="hljs-operator">&gt;=</span> salgrade.losal <span class="hljs-keyword">and</span> emp.salary <span class="hljs-operator">&lt;=</span> salgrade.hisal<br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span> , s.grade , s.losal, s.hisal <span class="hljs-keyword">from</span> emp e , salgrade s <span class="hljs-keyword">where</span> e.salary <span class="hljs-operator">&gt;=</span> s.losal <span class="hljs-keyword">and</span> e.salary <span class="hljs-operator">&lt;=</span> s.hisal;<br><span class="hljs-comment">-- 方式二</span><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span> , s.grade , s.losal, s.hisal <span class="hljs-keyword">from</span> emp e , salgrade s <span class="hljs-keyword">where</span> e.salary <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal;<br><br><br><span class="hljs-number">6</span>). 查询 &quot;研发部&quot; 所有员工的信息及 工资等级<br>表: emp , salgrade , dept<br>连接条件 : emp.salary <span class="hljs-keyword">between</span> salgrade.losal <span class="hljs-keyword">and</span> salgrade.hisal ,<br>emp.dept_id <span class="hljs-operator">=</span> dept.id<br>查询条件 : dept.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;研发部&#x27;</span><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span> , s.grade <span class="hljs-keyword">from</span> emp e , dept d , salgrade s <span class="hljs-keyword">where</span> e.dept_id <span class="hljs-operator">=</span> d.id <span class="hljs-keyword">and</span> (e.salary <span class="hljs-keyword">between</span> s.losal <span class="hljs-keyword">and</span> s.hisal ) <span class="hljs-keyword">and</span> d.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;研发部&#x27;</span>;<br><br><br><span class="hljs-number">7</span>). 查询 &quot;研发部&quot; 员工的平均工资<br>表: emp , dept<br>连接条件 : emp.dept_id <span class="hljs-operator">=</span> dept.id<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(e.salary) <span class="hljs-keyword">from</span> emp e, dept d <span class="hljs-keyword">where</span> e.dept_id <span class="hljs-operator">=</span> d.id <span class="hljs-keyword">and</span> d.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;研发部&#x27;</span>;<br><br><br><span class="hljs-number">8</span>). 查询工资比 &quot;灭绝&quot; 高的员工信息。<br>①. 查询 &quot;灭绝&quot; 的薪资<br><span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;灭绝&#x27;</span>;<br>②. 查询比她工资高的员工数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> ( <span class="hljs-keyword">select</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;灭绝&#x27;</span> );<br><br><br><span class="hljs-number">9</span>). 查询比平均薪资高的员工信息<br>①. 查询员工的平均薪资<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(salary) <span class="hljs-keyword">from</span> emp;<br>②. 查询比平均薪资高的员工信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> ( <span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(salary) <span class="hljs-keyword">from</span> emp );<br><br><br><span class="hljs-number">10</span>). 查询低于本部门平均工资的员工信息<br>①. 查询指定部门平均薪资<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(e1.salary) <span class="hljs-keyword">from</span> emp e1 <span class="hljs-keyword">where</span> e1.dept_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(e1.salary) <span class="hljs-keyword">from</span> emp e1 <span class="hljs-keyword">where</span> e1.dept_id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>②. 查询低于本部门平均工资的员工信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e2 <span class="hljs-keyword">where</span> e2.salary <span class="hljs-operator">&lt;</span> ( <span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(e1.salary) <span class="hljs-keyword">from</span> emp e1 <span class="hljs-keyword">where</span> e1.dept_id <span class="hljs-operator">=</span> e2.dept_id );<br><br><br><span class="hljs-number">11</span>). 查询所有的部门信息, 并统计部门的员工人数<br><span class="hljs-keyword">select</span> d.id, d.name , ( <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">where</span> e.dept_id <span class="hljs-operator">=</span> d.id ) <span class="hljs-string">&#x27;人数&#x27;</span> <span class="hljs-keyword">from</span> dept d;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tag文件与Tag标记</title>
    <link href="/2023/05/04/jsp-3/"/>
    <url>/2023/05/04/jsp-3/</url>
    
    <content type="html"><![CDATA[<p><font size=6><strong>目录</strong></font></p><ul><li><a href="#tag%E6%96%87%E4%BB%B6">tag文件</a><ul><li><a href="#tag%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84">tag文件的结构</a></li><li><a href="#tag%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%9D%E5%AD%98">tag文件的保存</a><ul><li><a href="#tag%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E7%9A%84%E7%9B%AE%E5%BD%95">tag文件所在的目录</a></li><li><a href="#tag%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A0%81">tag文件的编码</a></li></ul></li></ul></li><li><a href="#tag%E6%A0%87%E8%AE%B0">tag标记</a><ul><li><a href="#tag%E6%A0%87%E8%AE%B0%E4%B8%8Etag%E6%96%87%E4%BB%B6">tag标记与tag文件</a></li><li><a href="#tag%E6%A0%87%E8%AE%B0%E7%9A%84%E4%BD%BF%E7%94%A8">tag标记的使用</a></li><li><a href="#tag%E6%A0%87%E8%AE%B0%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86">tag标记的运行原理</a></li></ul></li><li><a href="#tag%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4">tag文件的常用指令</a><ul><li><a href="#tag%E6%8C%87%E4%BB%A4">tag指令</a></li><li><a href="#include%E6%8C%87%E4%BB%A4">include指令</a></li><li><a href="#attribute%E6%8C%87%E4%BB%A4">attribute指令</a></li><li><a href="#variable%E6%8C%87%E4%BB%A4">variable指令</a></li><li><a href="#taglib%E6%8C%87%E4%BB%A4">taglib指令</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93%E4%B8%BA">总结为:</a></li></ul><h1 id="tag文件"><a href="#tag文件" class="headerlink" title="tag文件"></a>tag文件</h1><h2 id="tag文件的结构"><a href="#tag文件的结构" class="headerlink" title="tag文件的结构"></a>tag文件的结构</h2><p>Tag文件是扩展名为.tag的文本文件，其结构与jsp文件类似<br>可以被jsp页面动态加载调用,实现代码的复用(但用户不能直接通过该Tag文件所在的Web服务目录直接访问Tag文件)<br>包含:  </p><ul><li>HTML标记符</li><li>特殊的指令标记</li><li>成员变量和方法的定义</li><li>Java程序片和Java表达式</li></ul><h2 id="tag文件的保存"><a href="#tag文件的保存" class="headerlink" title="tag文件的保存"></a>tag文件的保存</h2><h3 id="tag文件所在的目录"><a href="#tag文件所在的目录" class="headerlink" title="tag文件所在的目录"></a>tag文件所在的目录</h3><p>建立目录结构</p><p><code>Web服务目录\WEB-INF\tags</code></p><ul><li>其中的WEB-INF（字母大写）和tags都是固定的目录名称，而tags下的子目录的名称可由用户给定。</li><li>一个Tag文件必须保存到tags目录或其下的子目录中。</li></ul><h3 id="tag文件的编码"><a href="#tag文件的编码" class="headerlink" title="tag文件的编码"></a>tag文件的编码</h3><p>保存Tag文件时按照Tag文件指定的编码保存<br>例如:<br><code>&lt;%@ tag pageEncoding=&quot;utf-8&quot;%&gt;</code>  </p><h1 id="tag标记"><a href="#tag标记" class="headerlink" title="tag标记"></a>tag标记</h1><h2 id="tag标记与tag文件"><a href="#tag标记与tag文件" class="headerlink" title="tag标记与tag文件"></a>tag标记与tag文件</h2><p>某个Web服务目录下的Tag文件只能由该Web服务目录中的JSP页面调用,JSP页面必须通过Tag标记来调用一个Tag文件<br>Tag标记的名字和Tag文件的名字一致，也就是说，当我们编写了一个Tag文件并保存到特定目录中后,也就给出了一个Tag标记，tag格式为:<br><code>&lt;Tag文件的名字/&gt;</code><br>或者<br><code>&lt;Tag文件的名字&gt;其他内容（称为标体内容）&lt;/Tag文件的名字&gt;</code></p><ul><li>一个Tag文件对应一个Tag标记，把全体Tag标记称为一个自定义标记库或简称为标记库</li></ul><h2 id="tag标记的使用"><a href="#tag标记的使用" class="headerlink" title="tag标记的使用"></a>tag标记的使用</h2><p>一个jsp页面通过使用tag标记来调用一个Tag文件。Web服务目录下的一个jsp页面使用tag标记调用文件之前，必须首先使用taglib指令标记引入该web服务目录下的标记库，只有这样jsp才能调用相应的tag文件</p><p>taglib指令的格式如下:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> tagdir=<span class="hljs-string">&#x27;标记库的位置&#x27;</span> prefix=<span class="hljs-string">&#x27;前缀&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> tagdir=<span class="hljs-string">&#x27;/WEB-INF/tags&#x27;</span> prefix=<span class="hljs-string">&#x27;computer&#x27;</span>%&gt;<br></code></pre></td></tr></table></figure><ul><li>引入标记库后，JSP页面就可以使用带前缀的Tag标记调用相应的Tag文件，其中的前缀由<code>&lt;taglib&gt;</code>指令中的<code>prefix</code>属性指定。</li><li>前缀就像一个目录的别名<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;前缀:Tag文件名&gt;<br></code></pre></td></tr></table></figure>例如:<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;computer:oddNumberSum&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="tag标记的运行原理"><a href="#tag标记的运行原理" class="headerlink" title="tag标记的运行原理"></a>tag标记的运行原理</h2><ol><li>如果该Tag标记对应的Tag文件是首次被JSP页面调用，那么Tomcat服务器会将Tag文件转译成一个java文件，并编译这个java文件生成字节码文件，然后执行这个字节码文件（这和执行JSP页面的原理类似）。</li><li>如果该Tag文件已经被转编译为字节码文件，Tomcat服务器将直接执行这个字节码文件。</li><li>如果对Tag文件进行了修改，那么Tomcat服务器会重新将Tag文件转译成一个java文件，并编译这个java文件生成字节码文件，然后执行这个字节码文件。</li></ol><h1 id="tag文件的常用指令"><a href="#tag文件的常用指令" class="headerlink" title="tag文件的常用指令"></a>tag文件的常用指令</h1><h2 id="tag指令"><a href="#tag指令" class="headerlink" title="tag指令"></a>tag指令</h2><p>类似于JSP文件中的page指令。Tag文件通过使用tag指令可以指定某些属性的值<br>Tag指令的语法如下:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ tag 属性<span class="hljs-number">1</span>=<span class="hljs-string">&#x27;属性值&#x27;</span> 属性<span class="hljs-number">2</span>=<span class="hljs-string">&#x27;属性值&#x27;</span>---属性n=<span class="hljs-string">&#x27;属性值&#x27;</span>% &gt;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ tag 属性<span class="hljs-number">1</span>=<span class="hljs-string">&#x27;属性值&#x27;</span> % &gt;<br>&lt;%@ tag 属性<span class="hljs-number">2</span>=<span class="hljs-string">&#x27;属性值&#x27;</span> % &gt;<br>&lt;%@ tag 属性<span class="hljs-number">3</span>=<span class="hljs-string">&#x27;属性值&#x27;</span> % &gt;<br>······<br>&lt;%@ tag 属性n=<span class="hljs-string">&#x27;属性值&#x27;</span> % &gt;<br></code></pre></td></tr></table></figure><ul><li><p>language属性<br>用于指定Tag文件使用的脚本语言<br>目前只能取值<code>java</code>，其默认值就是<code>java</code>，没有必要使用tag指令指定language属性的值。</p></li><li><p>import属性<br>import属性的作用是为Tag文件引入包中的类import属性默认已经有如下值：<code>java.lang.*</code>、 <code>javax.servlet.*</code>、<code>javax.servlet.jsp.*</code>、<code>javax.servlet.http.*</code>。</p></li></ul><p>c.pageEncording<br>该属性指定Tag文件的字符编码，其默认值是<code>ISO-8859-1</code>。目前，为了避免显示信息出现乱码现象，Tag文件需要将该属性值设置为<code>utf-8</code>。</p><h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p>Tag文件中也有和JSP文件类似的include指令标记，其使用方法和作用与JSP文件中的include指令标记类似。</p><h2 id="attribute指令"><a href="#attribute指令" class="headerlink" title="attribute指令"></a>attribute指令</h2><ul><li><p>在tag文件中通过<code>attribute指令</code>让使用它的jsp页面向该页面tag文件传递需要的数据。<br>方式如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tag">&lt;%@ attribute name=&quot;对象名字&quot; required=&quot;ture&quot;|&quot;false&quot; type =&quot;对象的类型&quot;%&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tag">&lt;%@ attribute name=&quot;reuslt&quot; required=&quot;ture&quot; type=&quot;java.lang.Double&quot;%&gt;<br></code></pre></td></tr></table></figure><ul><li>相当于tag文件中有了一个名字是result的对象，但Tag文件不需要创建该对象result，而是等待JSP页面将一个Double型的对象的引用传递给result。</li><li><code>attribute指令</code>中的name属性时必需的,该属性的值时一个对象的名字.JSP页面在调用Tag文件时,可向name属性指定的对象传递一个引用</li><li>type在指定对象类型时,必须使用包名,比如,不可以将java.lang.Double简写为Double. 若没指定 默认为java.lang.String类型</li></ul></li><li><p>JSP页面使用Tag文件所调用的Tag文件中name指定的对象传递一个引用，方式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;前缀:Tag文件名字 对象名字=<span class="hljs-string">&quot;对象的引用&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;computer:<span class="hljs-type">mayTag</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new Double(3.1415926)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>jsp页面使用Tag标记(假定标记的前缀为computer)调用myTag.tag ,向myTag.tag中attribute指令给出的对象result 传递了一个Double对象的引用</p></li><li><p>注: 在Tag文件中不可以再定义和attribute指令中的name属性给出的对象具有相同名字的遍历,否则将隐藏attribute指令中给出的对象,使其失效</p></li></ul><h2 id="variable指令"><a href="#variable指令" class="headerlink" title="variable指令"></a>variable指令</h2><p>Tag文件通过使用<code>variable指令</code>可以将Tag文件中的对象返回给调用该Tag文件的JSP页面，(即Tag文件返回数据给JSP页面)<br>格式如下：  </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ variable name-given=<span class="hljs-string">&quot;对象名&quot;</span> variable-class=<span class="hljs-string">&quot;对象类型&quot;</span> scope=<span class="hljs-string">&quot;有效范围&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><p>name-givenTag<br>返回给jsp页面的对象，由字母，数字，下画线和美元符号组成</p></li><li><p>variable-class<br>返回的对象的类型，必须要完整包名，默认为java.lang.String类型</p></li><li><p>scope<br>  可以取：AT_BEGIN、NESTED和AT_END。</p><ul><li>AT_BEGIN：一开始使用Tag标记，就得到了返回的对象</li><li>NESTED：只可以在Tag标记的标记体中使用返回的对象</li><li>AT_END：在Tag标记结束后，才能返回对象</li></ul></li><li><p>对象的返回<br>Tag文件必须将要返回的对象的名字和引用存储到Tomcat服务器提供的<code>内置对象jspContext</code>中,JSP页面才能使用该对象<br>具体为<code>jspContext</code>调用<code>setAttribute(&quot;对象名&quot;,对象的引用)</code>;<br>之后jsp可以直接使用返回的对象.</p></li></ul><h2 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h2><p>引入标记库，格式如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib tagdir=<span class="hljs-string">&quot;自定义标记库的位置&quot;</span> prefix=<span class="hljs-string">&quot;前缀&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>JSP页面或Tag文件都可以使用taglib指令使用标记库</li></ul><h1 id="总结为"><a href="#总结为" class="headerlink" title="总结为:"></a>总结为:</h1><ol><li>先在jsp文件中 通过<code>taglib指令</code> 引入标记库(tag文件所在目录) <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib tagdir=<span class="hljs-string">&quot;自定义标记库的位置&quot;</span> prefix=<span class="hljs-string">&quot;前缀&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li><li>再在引入的tag文件中通过<code>attribute指令</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tag">&lt;%@ attribute name=&quot;对象名字&quot; required=&quot;ture&quot;|&quot;false&quot; type =&quot;对象的类型&quot;%&gt;<br></code></pre></td></tr></table></figure>让使用它的jsp文件向该tag文件传递引用给<code>name</code><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;前缀:Tag文件名字 对象名字=<span class="hljs-string">&quot;对象的引用&quot;</span>/&gt;   <span class="hljs-comment">//前缀为taglib指令中指定的prefix</span><br></code></pre></td></tr></table></figure>之后tag文件中可自由使用已被传递引用的 <code>name</code></li><li>在 tag 文件中通过使用<code>variable指令</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tag">&lt;%@ variable name-given=&quot;对象名&quot; variable-class=&quot;对象类型&quot; scope=&quot;有效范围&quot;&gt;<br></code></pre></td></tr></table></figure>再通过<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tag">jspContext.setAttribute(&quot;对象名&quot;,对象的引用);<br></code></pre></td></tr></table></figure>“对象名”返回给使用该tag文件的jsp页面<br>使得jsp可以 自由使用返回的”对象名”</li></ol>]]></content>
    
    
    <categories>
      
      <category>JSP</category>
      
      <category>第三章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法基础-1-基础算法（二）</title>
    <link href="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><p><code>c++</code>才需要<br><code>Java</code>和<code>Python</code>是不需要高精度计算的，因为这两个语言直接支持高精度数据。</p><h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><p><a href="https://www.acwing.com/problem/content/793/">题目791.</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-22-13-03-04.png"><br>完整代码:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//C=A+B</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;      <span class="hljs-comment">//加引用是为了提高效率,不用copy一遍</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;      <span class="hljs-comment">//进位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>()||i&lt;B.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(i&lt;A.<span class="hljs-built_in">size</span>())  t+=A[i];<br>        <span class="hljs-keyword">if</span>(i&lt;B.<span class="hljs-built_in">size</span>())  t+=B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t) C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string a,b;         <span class="hljs-comment">//用字符串读入</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; A,B;    <span class="hljs-comment">//存到vector里去</span><br>    cin &gt;&gt; a&gt;&gt; b;       <span class="hljs-comment">//正序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);  <span class="hljs-comment">//逆序//-&#x27;0&#x27;是因为a[i]中存的是字母 而我们需要存的是数字</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  B.<span class="hljs-built_in">push_back</span>(b[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> C=<span class="hljs-built_in">add</span>(A,B);            <span class="hljs-comment">//auto就是编译器可以自己识别自己需要的类型并转变为它</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=C.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ul><li>大整数存储<ul><li>存入数组,低位在前,这样进位添加高位直接在数组后面插入即可</li></ul></li><li>模拟人工加法过程<ul><li>A<sub>i</sub>+B<sub>i</sub>+t(进位: 0 or 1)</li></ul></li></ul><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// C = A + B, A &gt;= 0, B &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() &lt; B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(B, A);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>函数使用引用或指针一般能使代码速度更快,占用空间更小</li><li>上面完整代码和代码模板思路是一样的 都可以写</li><li>auto就是编译器可以自己识别自己需要的类型并转变为它</li><li>用字符串读入数字后,要传入数组需要将其-‘0’</li></ul><h2 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h2><p>题目:<a href="https://www.acwing.com/problem/content/794/">高进度减法</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-23-13-10-08.png"><br>完整代码:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//判断A&gt;=B</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(A.<span class="hljs-built_in">size</span>()!=B.<span class="hljs-built_in">size</span>())   <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>()&gt;B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=A.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(A[i]!=B[i])  <span class="hljs-keyword">return</span> A[i]&gt;B[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//C=A-B</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>();i++)&#123;<br>        t=A[i]-t;<br>        <span class="hljs-keyword">if</span>(i&lt;B.<span class="hljs-built_in">size</span>())  t-=B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t+<span class="hljs-number">10</span>)%<span class="hljs-number">10</span>);              <span class="hljs-comment">//t&gt;=0 t;t&lt;0 t+10</span><br>        <span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">0</span>) t=<span class="hljs-number">1</span>;                         <span class="hljs-comment">//判断是否借位</span><br>        <span class="hljs-keyword">else</span> t=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>&amp;&amp;C.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>)   C.<span class="hljs-built_in">pop_back</span>();   <span class="hljs-comment">//去掉前导0</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string a,b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A,B;<br>    cin &gt;&gt; a&gt;&gt; b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  B.<span class="hljs-built_in">push_back</span>(b[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cmp</span>(A,B))&#123;<br>        <span class="hljs-keyword">auto</span> C=<span class="hljs-built_in">sub</span>(A,B);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=C.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">auto</span> C=<span class="hljs-built_in">sub</span>(B,A);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=C.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>大致与加法相同</li><li>判断<code>A≥B</code> 若 <code>ture</code> 则 直接算<code>A-B</code>, 若<code>false</code> 则算<code>-(B-A)</code></li><li>判断<code>A[i]-B[i]-t</code> ,若<code>≥0</code>,则<code>A[i]-B[i]-t</code>;若<code>&lt;0</code>,则<code>A[i]-B[i]+10-t</code></li><li>去掉前导<code>0</code></li></ol><h3 id="代码模板-1"><a href="#代码模板-1" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;                                <span class="hljs-comment">//判断是否借位</span><br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();    <span class="hljs-comment">//去掉前导0</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul><li>不要忘记去掉前导零<ul><li>注意一位的时候无需去除 结果就是0</li></ul></li><li><code>(t+10)%10</code><ul><li><code>t&gt;=0</code> 结果为<code>t</code></li><li><code>t&lt;0</code>  结果为<code>t+10</code></li></ul></li><li>完整代码中的cmp函数写的很精简优美.</li></ul><h2 id="高精度乘以低精度"><a href="#高精度乘以低精度" class="headerlink" title="高精度乘以低精度"></a>高精度乘以低精度</h2><p>题目:<a href="https://www.acwing.com/problem/content/795/">高精度乘法</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-23-19-00-53.png"><br>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mult</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>()||t;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i&lt;A.<span class="hljs-built_in">size</span>()) t+=A[i]*b;<br>        C.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>&amp;&amp;C.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)    C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">auto</span> C=<span class="hljs-built_in">mult</span>(A,b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=C.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h2><ol><li>用大数的每一位 分别乘以小数 再加上进位即可</li><li>去先导0</li></ol><h3 id="代码模板-2"><a href="#代码模板-2" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || t; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h2><p><a href="https://www.acwing.com/problem/content/796/">高精度除法</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-23-21-47-56.png"><br>完整代码  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//A/B 商是C，余数是r</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A,<span class="hljs-type">int</span> &amp;b,<span class="hljs-type">int</span> &amp;r)</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=A.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;         <span class="hljs-comment">//是逆着存 A[0]存的低位</span><br>        r=A[i]+r*<span class="hljs-number">10</span>;<br>        C.<span class="hljs-built_in">push_back</span>(r/b);                   <span class="hljs-comment">//C顺着存  C[0]存的高位</span><br>        r=r%b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(),C.<span class="hljs-built_in">end</span>());    <span class="hljs-comment">//反转，使C逆着存 C[0]是低位</span><br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>&amp;&amp;C.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)    C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">auto</span> C=<span class="hljs-built_in">div</span>(A,b,r);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----%d------&quot;</span>,A.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=C.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,C[i]);<br>    cout&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><h3 id="代码模板-3"><a href="#代码模板-3" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ul><li>除法不同于加减乘，是由高位开始运算的，得出的结果也是高位在前,一般来说正着运算会好一点，但题目一般加减乘除一起出现，所以统一倒着来存</li><li>需要颠倒使得高位在后 可以比较方便的去先导零</li></ul><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="前缀和-1"><a href="#前缀和-1" class="headerlink" title="前缀和"></a>前缀和</h2><p><a href="https://www.acwing.com/problem/content/797/">题目</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-24-17-30-14.png"><br>完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N],s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);    <span class="hljs-comment">//前缀和的初始化</span><br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="hljs-number">-1</span>]+a[i];    <span class="hljs-comment">//可与上一条循环语句一起写</span><br>    <br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> l,r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,s[r]-s[l<span class="hljs-number">-1</span>]);             <span class="hljs-comment">//区间和的计算</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码模板-4"><a href="#代码模板-4" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">S[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] + ... a[i]                <span class="hljs-comment">//初始化,即预处理</span><br>a[l] + ... + a[r] = S[r] - S[l - <span class="hljs-number">1</span>]          <span class="hljs-comment">//计算,即询问</span><br></code></pre></td></tr></table></figure><p>作用:   求某段区间的和</p><h3 id="注意-3"><a href="#注意-3" class="headerlink" title="注意:"></a>注意:</h3><ul><li>预处理  O(n)</li><li>询问    O(1)</li><li>下标从1开始 避免了边界问题</li></ul><h2 id="子矩阵的和"><a href="#子矩阵的和" class="headerlink" title="子矩阵的和"></a>子矩阵的和</h2><p><a href="https://www.acwing.com/problem/content/798/">题目</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-24-18-09-57.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m,q,a[N][N],s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]),s[i][j]=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i][j];<span class="hljs-comment">//初始化，并求前缀和</span><br>    <br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,s[x2][y2]-s[x2][y1<span class="hljs-number">-1</span>]-s[x1<span class="hljs-number">-1</span>][y2]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>]);<span class="hljs-comment">//算子矩阵部分和</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码模板-5"><a href="#代码模板-5" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">S[i, j] = 第i行j列格子左上部分所有元素的和 <br>    即s[i][j]=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i][j]<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - <span class="hljs-number">1</span>, y2] - S[x2, y1 - <span class="hljs-number">1</span>] + S[x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>]<br>    即s[x2][y2]-s[x2][y1<span class="hljs-number">-1</span>]-s[x1<span class="hljs-number">-1</span>][y2]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><h3 id="注意-4"><a href="#注意-4" class="headerlink" title="注意:"></a>注意:</h3><ul><li>下标从1开始</li></ul><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p>本质是前缀和的逆运算</p><h2 id="差分-1"><a href="#差分-1" class="headerlink" title="差分"></a>差分</h2><p><a href="https://www.acwing.com/problem/content/799/">题目</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-24-20-53-34.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123; <span class="hljs-comment">//使得数组a在[l,r]区间上每个元素加上c</span><br>    b[l]+=c;<br>    b[r+<span class="hljs-number">1</span>]-=c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]),<span class="hljs-built_in">insert</span>(i,i,a[i]); <span class="hljs-comment">//在构建数组a的同时 利用差分性质构建a的差分数组b</span><br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> l,r,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);<br>        <span class="hljs-built_in">insert</span>(l,r,c);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)   b[i]+=b[i<span class="hljs-number">-1</span>],<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,b[i]);    <span class="hljs-comment">//数组b变成自己的前缀和,并输出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h3><ol><li>数组<code>a[1],a[2],a[3]...a[n]</code> ,构造<code>b[1],b[2],b[3]...b[n]</code> ,使得 <code>a[i]=b[1]+b[2]+...+b[i]</code>.此时<code>数组a</code>是<code>数组b</code>的<code>前缀和</code>  <code>数组b</code>是<code>数组a</code>的<code>差分</code></li><li>若<code>b[i]+c</code> 那么<code>a[i],a[i+1]....a[n]</code>都会加上<code>c</code>,若<code>b[i]-c</code> 那么<code>a[i],a[i+1]....a[n]</code>都会减上<code>c</code></li><li>由2可得 要使<code>数组a</code>的<code>[l,r]</code>区间内每个元素都加上<code>c</code>,可使<code>b[l]</code>加上<code>c</code>,<code>b[r+1]</code>减上<code>c</code></li><li>利用4 在构建<code>数组a</code> 的同时 构建<code>数组b</code></li></ol><h3 id="代码模板-6"><a href="#代码模板-6" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">给数组a区间[l, r]中的每个数加上c：B[l] += c, B[r + <span class="hljs-number">1</span>] -= c<br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><strong>※如何构造差分:利用 <code>数组a区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c</code> 的性质 可以在构建a数组的同时构建b数组 <em>设a b数组元素初始全为0</em>  若构建a数组时由0变为a[i]  根据特性此时b[i]+&#x3D;a[i] ,b[i+1]-&#x3D;c  ,数组a构建完成时,数组b也构建完成</strong></li><li>由数组b到数组a 时间复杂度需要O(n)</li><li>数组a [l,r] 中得每个数加上c 时间复杂度O(1)</li></ul><h2 id="差分矩阵"><a href="#差分矩阵" class="headerlink" title="差分矩阵"></a>差分矩阵</h2><p><a href="https://www.acwing.com/problem/content/800/">题目</a><br><img src="/2023/04/22/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/2023-04-24-21-12-17.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N][N],b[N][N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    b[x1][y1]+=c;<br>    b[x1][y2+<span class="hljs-number">1</span>]-=c;<br>    b[x2+<span class="hljs-number">1</span>][y1]-=c;<br>    b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>]+=c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m,q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)   <br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]),<span class="hljs-built_in">insert</span>(i,j,i,j,a[i][j]);   <span class="hljs-comment">//构建矩阵a的同时，构建矩阵b</span><br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x1,y1,x2,y2,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d %d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;c);<br>        <span class="hljs-built_in">insert</span>(x1,y1,x2,y2,c);                      <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)  <br>            b[i][j]+=b[i<span class="hljs-number">-1</span>][j]+b[i][j<span class="hljs-number">-1</span>]-b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>],<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,b[i][j]);<span class="hljs-comment">//将矩阵b变成自己的前缀和并输出</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码模板-7"><a href="#代码模板-7" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + <span class="hljs-number">1</span>, y1] -= c, S[x1, y2 + <span class="hljs-number">1</span>] -= c, S[x2 + <span class="hljs-number">1</span>, y2 + <span class="hljs-number">1</span>] += c<br>即:使得矩阵a的以[x1,y1]为左上角,[x2,y2]为右下角的子矩阵中的所有元素加上c<br>    b[x1][y1]+=c;<br>    b[x1][y2+<span class="hljs-number">1</span>]-=c;<br>    b[x2+<span class="hljs-number">1</span>][y1]-=c;<br>    b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>]+=c;<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSP语法</title>
    <link href="/2023/04/19/jsp-2/"/>
    <url>/2023/04/19/jsp-2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JSP页面的基本结构"><a href="#1-JSP页面的基本结构" class="headerlink" title="1 JSP页面的基本结构"></a>1 JSP页面的基本结构</h1><ul><li>普通的HTML标记和jsp标记</li><li>JSP标记，如指令标记、动作标记</li><li>变量和方法的声明</li><li>Java 程序片</li><li>Java 表达式</li></ul><h1 id="2-声明变量和定义方法"><a href="#2-声明变量和定义方法" class="headerlink" title="2 声明变量和定义方法"></a>2 声明变量和定义方法</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>格式:<code>&lt;%!变量%&gt;</code>  </p><ul><li>声明的变量在整个JSP页面内都有效</li></ul><h2 id="定于方法"><a href="#定于方法" class="headerlink" title="定于方法"></a>定于方法</h2><p>格式:<code>&lt;%!方法or类%&gt;</code>  </p><ul><li>可以在Java程序片中调用该方法或使用该类创造对象</li></ul><h1 id="3-Java程序片"><a href="#3-Java程序片" class="headerlink" title="3 Java程序片"></a>3 Java程序片</h1><p>格式:<code>&lt;%所插入的java程序片%&gt;</code></p><ul><li>在程序片中声明的变量称作JSP页面的局部变量。局部变量的有效范围与其声明的位置有关，即局部变量在JSP页面后继的所有程序片以及表达式部分内都有效。</li></ul><h1 id="4-Java表达式"><a href="#4-Java表达式" class="headerlink" title="4 Java表达式"></a>4 Java表达式</h1><p>格式:<code>&lt;%=可求值得表达式%&gt;</code></p><ul><li>注意:<code>&lt;%</code>和<code>=</code>之间不能有空格</li></ul><h1 id="5-JSP中的注释"><a href="#5-JSP中的注释" class="headerlink" title="5 JSP中的注释"></a>5 JSP中的注释</h1><h2 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h2><p>格式:<code>&lt;!--注释内容--&gt;</code></p><ul><li>JSP会把HTML注释交给用户,因此用户可在查看页面源码时看到HTML注释</li></ul><h2 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h2><p>格式:<code>&lt;% --注释内容--%&gt;</code></p><ul><li>在编译JSP页面时会忽略JSP注释</li></ul><h1 id="6-JSP指令标记"><a href="#6-JSP指令标记" class="headerlink" title="6 JSP指令标记"></a>6 JSP指令标记</h1><h2 id="page指令标记"><a href="#page指令标记" class="headerlink" title="page指令标记"></a>page指令标记</h2><p>page 指令用来定义整个JSP页面的一些属性和这些属性的值。<br>可以使用多个page指令分别为每个属性指定值:  </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page   属性<span class="hljs-number">1</span>=<span class="hljs-string">&quot;属性1的值&quot;</span>  %&gt;<br>&lt;%@ page   属性<span class="hljs-number">2</span>=<span class="hljs-string">&quot;属性2的值&quot;</span>  %&gt;<br>… …<br>&lt;%@ page   属性n=<span class="hljs-string">&quot;属性n的值&quot;</span>  %&gt;<br></code></pre></td></tr></table></figure><p>也可以用一个page指令指定多个属性的值:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page 属性<span class="hljs-number">1</span>=<span class="hljs-string">&quot;属性1的值&quot;</span> 属性<span class="hljs-number">2</span>=<span class="hljs-string">&quot;属性2的值&quot;</span> ...%&gt;<br></code></pre></td></tr></table></figure><h3 id="page指令标记可以指定的属性"><a href="#page指令标记可以指定的属性" class="headerlink" title="page指令标记可以指定的属性"></a>page指令标记可以指定的属性</h3><h4 id="contentType属性"><a href="#contentType属性" class="headerlink" title="contentType属性"></a>contentType属性</h4><p>contentType属性值确定JSP页面响应的MIME类型。属性值的一般形式是： “MIME类型”<br>例如:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html &quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ul><li>page指令只能为contentType指定一个值，不允许两次使用page指令给contentType属性指定不同的属性值。</li></ul><h4 id="pageEncoding-属性"><a href="#pageEncoding-属性" class="headerlink" title="pageEncoding 属性"></a>pageEncoding 属性</h4><p>用于保存JSP页面编码<br>例如:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ <span class="hljs-type">page</span> <span class="hljs-variable">pageEncoding</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf-8&quot;</span> %&gt;    <br></code></pre></td></tr></table></figure><ul><li>只能为pageEncoding指定一个值，不允许两次使用page指令给pageEncoding属性指定不同的或相同的属性值。</li></ul><h4 id="language属性"><a href="#language属性" class="headerlink" title="language属性"></a>language属性</h4><p>language属性定义JSP页面使用的脚本语言，该属性的值目前只能取”java”</p><ul><li>未指定,默认java</li></ul><h4 id="import-属性"><a href="#import-属性" class="headerlink" title="import 属性"></a>import 属性</h4><p>该属性的作用是为JSP页面引入Java运行环境提供的包中的类。<br>例如:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page  <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span>, <span class="hljs-string">&quot;java.time.LocalDate&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><h4 id="session属性"><a href="#session属性" class="headerlink" title="session属性"></a>session属性</h4><p>session 属性用于设置是否需要使用内置的session对象。session的属性值可以是true或false。session属性默认的属性值是true</p><h4 id="buffer属性"><a href="#buffer属性" class="headerlink" title="buffer属性"></a>buffer属性</h4><p>内置输出流对象out负责将服务器的某些信息或运行结果发送到用户端显示。buffer属性用来指定out设置的缓冲区的大小或不使用缓冲区 </p><ul><li>默认时8kb<br>例如:<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page buffer= <span class="hljs-string">&quot;24kb&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="autoFlush属性"><a href="#autoFlush属性" class="headerlink" title="autoFlush属性"></a>autoFlush属性</h4><p>autoFlush属性指定out的缓冲区被填满时，缓冲区是否会自动刷新。</p><ul><li>默认是true</li></ul><h4 id="isThreadSafe属性"><a href="#isThreadSafe属性" class="headerlink" title="isThreadSafe属性"></a>isThreadSafe属性</h4><p>isThreadSafe属性用来设置访问JSP页面是否是线程安全的</p><ul><li>默认是true 指CPU的使用权在各个线程间快速切换</li><li>可设置为false 指该JSP页面同一时刻只能响应一个用户的请求，其他用户须排队等待</li></ul><h4 id="info-属性"><a href="#info-属性" class="headerlink" title="info 属性"></a>info 属性</h4><p>info属性的属性值是一个字符串，其目的时为JSP页面准备一个常用但可能要经常修改的字符串。<br>例如： </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ <span class="hljs-type">page</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;we are students&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>可以在jsp页面中使用方法：<code>getServletInfo();</code>来获取info属性的属性值  </p><h2 id="include指令标记"><a href="#include指令标记" class="headerlink" title="include指令标记"></a>include指令标记</h2><p>include可以在JSP页面内某处静态整体嵌入一个文件,该文件的编码必须和当前JSP页面一致</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% @ <span class="hljs-type">include</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;文件的URL&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><h1 id="7-JSP动作标记"><a href="#7-JSP动作标记" class="headerlink" title="7 JSP动作标记"></a>7 JSP动作标记</h1><p>动作标记时一种特殊的标记，它影响JSP运行时的功能。</p><h2 id="include动作标记"><a href="#include动作标记" class="headerlink" title="include动作标记"></a>include动作标记</h2><p>格式:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:include page= <span class="hljs-string">&quot;文件的URL&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:include page= <span class="hljs-string">&quot;文件的URL&quot;</span> &gt;<br>   param子标记<br>&lt;/jsp:include&gt;<br></code></pre></td></tr></table></figure><p>这个文件在JSP运行（Java文件的字节码文件被加载执行）时才包含进来</p><h2 id="param动作标记"><a href="#param动作标记" class="headerlink" title="param动作标记"></a>param动作标记</h2><p>param标记以<code>名字—值</code>对的形式为其他标记提供附加信息。<br>格式:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:param  name= <span class="hljs-string">&quot;参数&quot;</span>  value= <span class="hljs-string">&quot; 参数的值&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>该标记与<code>jsp:include</code>动作标记一起使用时,可以将<code>param标记</code>中参数的值传递到<code>include动作标记</code>要加载的文件中去,被加载的JSP文件可以通过使用Tomcat服务器提供的<code>request内置对象</code>获取<code>include动作标记</code>的<code>param子标记</code>中<code>name</code>给出的参数的值</p><h2 id="forward-动作标记"><a href="#forward-动作标记" class="headerlink" title="forward 动作标记"></a>forward 动作标记</h2><p>作用是从该指令处停止当前页面的执行，而转向执行page属性指定的JSP页面。<br>格式:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:forward page=<span class="hljs-string">&quot;要转向的页面&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:forward page=<span class="hljs-string">&quot;要转向的页面&quot;</span> &gt;<br>   param子标记<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><ul><li>浏览器地址栏中显示的仍然是转向前的JSP页面的URL地址</li></ul><h2 id="useBean动作标记"><a href="#useBean动作标记" class="headerlink" title="useBean动作标记"></a>useBean动作标记</h2><p>useBean标记时用来创建并使用一个JavaBean，见后续章节</p>]]></content>
    
    
    <categories>
      
      <category>JSP</category>
      
      <category>第二章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法基础-1-基础算法（一）</title>
    <link href="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p> 可借助<a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Comparison Sorting Algorithms</a>来理解</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>题目:<br><a href="https://www.acwing.com/problem/content/787/">快速排序</a><br><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-04-23-13-08-12.png"><br>完整代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<span class="hljs-comment">//加10防止越界</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j),<span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">quick_sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><strong>分治</strong></p><ol><li>确定分界点：头 、尾 、（头＋尾）&#x2F;2、 随机</li><li>调整区间，使得小于分界点的数全在其左边，大于分界点的数全在右边<ul><li>利用两个指针在数列两头向中间移动，左边的指针在碰到大于等于分界点时停下，右边的指针反之，都停下时交换两数，循环上述过程，直到两指针相交</li></ul></li><li>递归排序左右两端</li></ol><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a><strong>代码模板</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;        <span class="hljs-comment">//区间元素一个或者没有</span><br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>时间复杂度 nlogn</p></li><li><p><strong>若x取q[l]或者q[r]要考虑边界问题</strong><br>若 递归处用 i-1 和 i ,则x<strong>不可以</strong>取q[l] ,<strong>可以</strong>取q[r]或者q[(l+r+1)&#x2F;2]或者q[l+r+1&gt;&gt;1]等<br>若 递归处用 j 和 j+1 ,则x<strong>不可以</strong>取q[r] ,<strong>可以</strong>取q[l]或者q[(l+r)&#x2F;2]或者q[l+r&gt;&gt;1]等<br>否则可能会出现死循环<br>例如:x取q[l],递归处用i-1和i,排序12,会无限调用递归quick_sort(q,0,1),即无限划分<br>具体见<code>分析</code></p></li><li><p><strong>快排是不稳定的</strong><br>在排序前，关键字值相等的不同记录，排序后相对位置保持不变的排序方法，称为稳定排序方法（但其实没软用）<br>如何把快排变成稳定的呢—————把快排每个数变成不同的，可把每个数据弄成二元组，双关键字排序</p></li><li><p>c++的sort是快排和插入的组合,小范围用插入,大范围用快排</p></li><li><p>scanf比cin快<br><code>ios::sync_with_stdio(false); </code>可以让cin变快，但是副作用是不能用scanf了</p></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h3><ul><li><strong>边界问题分析</strong><br>分治算法最怕<code>n分成0和n,或n分成n和0</code>,这会造成<em>无限划分</em><br>若<code>x=q[l]</code>时 最极端情况是<code>i=l,j=l</code> 此时若划分为<code>(l,i-1)</code>和<code>(i,r)</code> 其中<code>(i,r)</code>划分的就是<code>n</code> 这就出现了<em>无限划分</em><br>若<code>x=q[r]</code>时 最极端情况时<code>i=r,j=r</code> 此时若划分为<code>(l,j)</code>和<code>(j+1,r)</code> 其中<code>(l,j)</code>划分的就是<code>n</code> 这就出现了<em>无限划分</em></li><li>关于<code>q[l+r&gt;&gt;1]</code>和<code>q[l+r+1&gt;&gt;1]</code> 的问题,<br><code>q[l+r+1&gt;&gt;1]</code>是向上取整,因为向上取整时有可能取到q[r],为了避免<em>无限划分</em>,所以递归处划分应该是i-1和i<br><code>q[l+r&gt;&gt;1]</code>是向下取整,因为向下取整时有可能取到q[l],为了避免<em>无限划分</em>,所以递归处划分应该时j和j+1<br><a href="https://www.acwing.com/solution/content/16777/"></a></li></ul><p>最后<br>为什么y总要<code>const int N = 1e6+10;</code> 要加10呢 我也没懂 但参考:<a href="https://www.zhihu.com/question/35047872">知乎</a></p><h3 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h3><p><code>快排</code>的拓展</p><p><a href="https://www.acwing.com/problem/content/788/">第k个数</a></p><p><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-05-07-12-02-54.png"></p><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h4><p>在<code>快排</code>的基础上 每次只需要判断k在左区间还是右区间，一直递归排序k所在区间即可</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,k,q[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r)    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> i=l<span class="hljs-number">-1</span>,j=r+<span class="hljs-number">1</span>,x=q[l+r&gt;&gt;<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>        <span class="hljs-keyword">do</span> i++;<span class="hljs-keyword">while</span>(q[i]&lt;x);<br>        <span class="hljs-keyword">do</span> j--;<span class="hljs-keyword">while</span>(q[j]&gt;x);<br>        <span class="hljs-keyword">if</span>(i&lt;j) <span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k&lt;=j) <span class="hljs-built_in">sort</span>(q,l,j,k);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">sort</span>(q,j+<span class="hljs-number">1</span>,r,k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">sort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,q[k<span class="hljs-number">-1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul><li>快排时间复杂度O(nlogn) 快选时间复杂度O(n) <ul><li>n+n&#x2F;2+n&#x2F;4+…</li></ul></li></ul><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>题目：<br><a href="https://www.acwing.com/problem/content/789/">归并排序</a><br><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-04-23-13-08-41.png"><br>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> q[N],temp[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;            <br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">MergeSort</span>(q,l,mid),<span class="hljs-built_in">MergeSort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)<br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j]) temp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> temp[k++]=q[j++];<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)   temp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) temp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(i =l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)  q[i]=temp[j];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">MergeSort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><p>分治</p><ol><li>确定分界点：mid&#x3D;l+r&gt;&gt;1</li><li>递归排序left，right<ul><li>确保每个区间都已排好顺序</li></ul></li><li>归并————合二为一 （时间复杂度O(n)）<ul><li>归并的两个区间已通过递归排好顺序,后面只需逐一比较,放入小的数即可</li></ul></li></ol><h3 id="代码模板-1"><a href="#代码模板-1" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;                                <span class="hljs-comment">//区间内元素一个或者没有</span><br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];        <span class="hljs-comment">//q[i]=q[j]先存入q[i] 使之稳定</span><br>        <span class="hljs-keyword">else</span> tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];       <span class="hljs-comment">//注意此处i从l开始到r j也可以用k 但要记得++</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ul><li>时间复杂度 nlogn</li><li>归并时是带回的是原数组的l到r，临时数组从0开始</li><li>与快排对比来看，快排是双指针先排再分，归并是先分再排</li></ul><h3 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h3><p><code>归并</code>的拓展<br><a href="https://www.acwing.com/problem/content/790/">逆序对的数量</a></p><p><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-05-07-13-05-07.png"></p><h4 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h4><p><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-05-07-13-47-57.png"></p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> q[N],temp[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function">LL <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    LL res = <span class="hljs-built_in">MergeSort</span>(q,l,mid)+<span class="hljs-built_in">MergeSort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)<br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j]) temp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> temp[k++]=q[j++],res += mid - i +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)   temp[k++]=q[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r)     temp[k++]=q[j++];<br>    <span class="hljs-keyword">for</span>(i =l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++)  q[i]=temp[j];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d &quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,<span class="hljs-built_in">MergeSort</span>(q,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><ul><li>逆序对数量的最大值<ul><li>如果数组是倒序,逆序对数量能取得最大值  $\frac{n(n-1)}{2} $ &gt; int</li></ul></li></ul><h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h2><p>题目:<br><a href="https://www.acwing.com/problem/content/791/">数的范围</a><br><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-04-23-13-09-07.png"><br>完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-comment">//确定左边界</span><br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)&#123;                     <span class="hljs-comment">//结束是l=r</span><br>            <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;             <span class="hljs-comment">//mid是需要不断更新的值 放在循环内 </span><br>            <span class="hljs-keyword">if</span>(q[mid]&gt;=x)r=mid;         <span class="hljs-comment">//因为左边界右侧的数字都&gt;=x</span><br>            <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(q[l]!=x)cout&lt;&lt;<span class="hljs-string">&quot;-1 -1&quot;</span>&lt;&lt;endl; <span class="hljs-comment">//无解</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;l&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;               <span class="hljs-comment">//输出左边界 l=r 所以输出r也可以</span><br>            <span class="hljs-comment">//确定右边界</span><br>            <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=n<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>                <span class="hljs-type">int</span> mid=l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(q[mid]&lt;=x) l=mid;    <span class="hljs-comment">//右边界左边的数都&lt;=x</span><br>                <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>            &#125;<br>            cout &lt;&lt; l &lt;&lt;endl;           <span class="hljs-comment">//输出右边界</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h3><p>二分的本质并不是单调性 有单调性一定可以二分 用二分的不一定有单调性<br>二分的本质是找<code>边界点</code> 每次二分时选择<strong>答案所在区间</strong> 当区间长度为1时 得出答案<br>若有某种性质使得一部分满足 另一部分不满足,二分可以用来寻找这个性质边界(两个边界对应两个模板)</p><h3 id="代码模板-2"><a href="#代码模板-2" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br><span class="hljs-comment">//右边成立 二分右边的分界点</span><br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;    <span class="hljs-comment">// check()判断mid是否满足性质</span><br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-comment">//左边成立 二分左边的分界点</span><br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;       <span class="hljs-comment">//向上取整</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>写法</strong></p><ol><li>先写一个mid(不确定向上or向下取整)</li><li>想一个check函数</li><li>根据check函数想如何划分再确定mid向上取整还是向下取整</li></ol><h3 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h3><ul><li>若模板二不能使用mid&#x3D;l+r&gt;&gt;1 即向下取整 此时如若l&#x3D;r-1 mid&#x3D;l 若check(mid)为true l&#x3D;mid&#x3D;l 进入死循环</li><li>二分是一定有解的(定义的性质一定有<code>边界</code>) 题目可能无解(根据二分出来的<code>边界</code>来判断有无解)</li><li>mid是需要不断更新的值 放在循环内</li></ul><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul><li><p><strong>边界问题</strong>:<br>关键在于缩小边界时l和r的取值是否会造成无限循环<br>如当<code>mid=l+r&gt;&gt;1</code>时 <code>mid</code>为向下取整 这时就有可能使得<code>mid=l</code> 而在缩小边界时,若使得<code>l=mid</code>,这无疑会产生无限循环,为此我们应该使得<code>mid</code>向上取整,即<code>mid=l+r+1&gt;&gt;1</code><br>同理有缩小边界使得<code>r=mid</code>,为了不让<code>mid</code>有可能取到<code>r</code>产生无限循环问题,应该使得<code>mid</code>向下取整,即<code>mid=l+r&gt;&gt;1</code><br>总结为:先不要确定mid向上取整还是向下取整,而是根据check函数来考虑缩小边界时是会使得<code>l</code>or<code>r</code>&#x3D;<code>mid</code><br>若<code>l=mid</code>,为了<strong>避免</strong><code>mid=l</code>的可能,我们使得<code>mid</code>向上取整,即<code>mid=l+r+1&gt;&gt;1</code><br>若<code>r=mid</code>,为了<strong>避免</strong><code>mid=r</code>的可能,我们使得<code>mid</code>向下取整,即<code>mid=l+r&gt;&gt;1</code><br><a href="https://www.acwing.com/solution/content/16798/"></a></p></li><li><p>if(check)中直接等于mid而else中+1-1问题<br>其实这要取决于我们所设置的check如例题中我们设置的是<code>q[mid]&gt;=x</code>条件,<br>若为<code>true</code>,那自然<code>mid</code>是满足条件的,所以边界<code>r</code>可以等于<code>mid</code><br>若为<code>false</code>,那自然<code>mid</code>是不满足条件的,所以边界<code>l</code>无疑不需要包含<code>mid</code><br><code>q[mid]&lt;=x</code>同理.</p></li></ul><h2 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h2><p>浮点数二分因为没有<code>整除</code> 所以每次二分都能严格取一半 所以没有<code>边界问题</code> 所以很简单<br><a href="https://www.acwing.com/problem/content/792/">数的三次方根</a><br><img src="/2023/04/17/acwing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/2023-04-23-13-09-33.png"><br>题目有坑(2个)<br>完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> esp = <span class="hljs-number">1e-8</span>;<br><span class="hljs-type">double</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;n);<br>    <span class="hljs-type">double</span> l=<span class="hljs-number">0</span>,r=n;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>&amp;&amp;n&gt;<span class="hljs-number">-1</span>)&#123;                         <span class="hljs-comment">//考虑特殊考虑-1&lt;n&lt;1的情况 因为绝对值小于1时,区间[l,r]根本不包含答案</span><br>        l=<span class="hljs-number">-1</span>;<br>        r=<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>   <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>) <span class="hljs-built_in">swap</span>(l,r);             <span class="hljs-comment">//要考虑数为负数的情况 答案在[n,0]之间</span><br>    <span class="hljs-keyword">while</span>(r-l&gt;esp)&#123;<br>        <span class="hljs-type">double</span> mid = (l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid*mid*mid&gt;=n)  r=mid;<br>        <span class="hljs-keyword">else</span>                l=mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,r);                        <span class="hljs-comment">//l or r 都可</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h3><p>每次二分答案都在区间内部 当区间很小时 就得出答案</p><h3 id="代码模板-3"><a href="#代码模板-3" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-type">double</span> l, <span class="hljs-type">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;   <span class="hljs-comment">// eps 表示精度，取决于题目对精度的要求</span><br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;           <br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意-5"><a href="#注意-5" class="headerlink" title="注意"></a>注意</h3><ul><li>经验: 若题目要求保留n位小数 精度写1e-(n+2)</li><li>还有第二种写法 <ul><li>不用精度取迭代 而是直接循环100次 将<code>while (r - l &gt; eps)</code> 换成<code>for(int i=0;i&lt;100;i++)</code></li></ul></li><li>注意例题求数三次方根的两个坑<ul><li>考虑负数————交换l和r即可</li><li>考虑<code>-1&lt;n&lt;1</code>的情况,区间不包含答案————将区间设为[-1,1]即可</li></ul></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
      <category>第一章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OS-5-1-I/O管理概述</title>
    <link href="/2023/04/16/OS-5-1-I-O%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/04/16/OS-5-1-I-O%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="94060cc29a25a6ae2d60cb0f113d7e64af161d3ac566f92ce1303476b7bab2f5">01d7cac278ef89b863b3c951eb8364ec4b25d326537b8cfd6c2b318ff2e7cfa758872eb047d069c0cf34aa459c9db87c6c72f86f81990875b47621bfd65b0d5d77689312dbb393e7163366c91bb7f08d114855cc10b619cb9136db1257c70a0c99ca2374520f5e22e8e7143a7f1c69e9a30286b42e38723dc30dc3587df00a67123c9df8c9baae833a27b753ddc4b21d52b3f69fd7c7559a4d06b6174a4cc0700cce844da0b046c0b79862ffad9e8bdbfabe584a006bdc828613970c05d74c6d9cbb33216423a30b380fe9fd0afe92c77470f723bea25f929ece3efe459727acd706f99b3d91449e96097fa59b78b2b143fbb64ff1d53e016dfb54d9df632947eddecf26d19e84d33b1b25c308fe9cdff172da9793c953440c779ecaab1818117de77533ebed35a5507aabd2b2681ef7d17ac183aa03b2945df01965af45df05</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>第五章</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pictest</title>
    <link href="/2023/04/15/pictest/"/>
    <url>/2023/04/15/pictest/</url>
    
    <content type="html"><![CDATA[<p>hexo如何更好的插入本地图片</p><hr><h1 id="全局资源文件夹"><a href="#全局资源文件夹" class="headerlink" title="全局资源文件夹"></a>全局资源文件夹</h1><p>hexo 全局资源文件夹<code>source/images</code>的图片可以直接用 markdown 语法 <code>![](image/someimage.jpg)</code>来引用,但图片放多了难以整理</p><h1 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h1><p>为了更有效的管理图片等资源可开启Hexo文章资源文件夹,可在<code>_config.yml</code>站点配置文件(注意是Hexo博客目录下,并非<code>theme/sometheme/_config.ml</code>)中进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>开启之后 每次 <code>hexo new [layout] &lt;title&gt;</code> 创建新文章时自动创建一个新同名文件夹 文件夹中的文件可直接用相对路径引用它们</p><h1 id="使用markdown嵌入图片"><a href="#使用markdown嵌入图片" class="headerlink" title="使用markdown嵌入图片"></a>使用markdown嵌入图片</h1><p>hexo-renderer-marked 3.1.0 引入了一个新的选项，其允许你无需使用 asset_img 标签插件就可以在 markdown 中嵌入图片</p><p>如需启用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">_config.yml</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> 。</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>但是我们每次插入图片要放入相应文件夹很麻烦,为此我们在vscode 安装 Paste Image 插件可实现访问裁切板 通过<code>Ctrl</code>+<code>Alt</code>+<code>C</code>自动将剪切板图片复制到文件当前目录下,但是这样页仅仅是满足了markdown格式,我们需要其能放在同名文件夹下</p><h2 id="局部设置"><a href="#局部设置" class="headerlink" title="局部设置"></a>局部设置</h2><p>若只想在当前文件夹下的.md文件中对Paste Image进行相关设置，可以在当前目录下的.vscode文件夹内创建settings.json文件，局部设置的优先级高于全局设置。如下所示进行设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;pasteImage.path&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;currentFileDir&#125;</span>/<span class="hljs-variable">$&#123;currentFileNameWithoutExt&#125;</span>&quot;</span>,<br>    <br>    <span class="hljs-string">&quot;pasteImage.insertPattern&quot;</span>: <span class="hljs-string">&quot;![](<span class="hljs-variable">$&#123;imageFileName&#125;</span>)&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>在首选项配置文件中找到settings.json进行同样操作,在次不再赘述</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>vscode上预览markdown时图片由于路径问题无法正确显示<br>若你已经有其他用markdown写笔记的需求 建议你只进行局部设置</p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
      <category>测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试加密模块</title>
    <link href="/2023/04/13/dd/"/>
    <url>/2023/04/13/dd/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a952086cf211ef563b2fe80003be8c8fb535e560b8ed6c9ec11590016baa4cc">55b2803ebc192d0c2b188487861950f53901f0f897de39ebc2d24461a4bf4b30d90fa41fe548bf9b6d945179f400d49944b2abdda8e863a6aca6c32718cbbb588a37f037304d0c303073a8c4996df041e21478be17ff9735c2cca1023b1a44af076ea20ff30182c5368bd14136800c1de5c3da5a400b490bfcc98113ff7eb4ef6b26d2fe87d391d709e2f87c67b87c83e432691a6b754d5757925abfd259e7efb03195b7ad94e961888854e872be763ddde467198979f4524b0ed4876a6ac1ecb5db9c4d9b7ee5e761a325661d1f28eaf517844357de3c2117d650321ecad1bf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2023/04/13/hello-world/"/>
    <url>/2023/04/13/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><hr><p>本站基于<a href="https://hexo.io/zh-cn/">hexo</a>框架搭建</p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
